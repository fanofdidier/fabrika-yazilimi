{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{useAuth}from'./AuthContext';import{io}from'socket.io-client';// Create context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const SocketContext=/*#__PURE__*/createContext();// Socket Provider Component\nexport const SocketProvider=_ref=>{let{children}=_ref;const{user,isAuthenticated}=useAuth();const[socket,setSocket]=useState(null);const[connected,setConnected]=useState(false);const[onlineUsers,setOnlineUsers]=useState([]);// Real socket connection\nuseEffect(()=>{if(isAuthenticated&&user){console.log('Socket bağlantısı başlatılıyor...');const newSocket=io('http://192.168.1.101:5001',{auth:{token:localStorage.getItem('token')},transports:['polling'],timeout:10000,reconnection:true,reconnectionAttempts:5,reconnectionDelay:1000});newSocket.on('connect',()=>{console.log('Socket connected:',newSocket.id);setConnected(true);setSocket(newSocket);});newSocket.on('disconnect',reason=>{console.log('Socket disconnected:',reason);setConnected(false);setOnlineUsers([]);});newSocket.on('connect_error',error=>{console.error('Socket connection error:',error);setConnected(false);});newSocket.on('reconnect',attemptNumber=>{console.log('Socket reconnected after',attemptNumber,'attempts');setConnected(true);});newSocket.on('onlineUsers',users=>{setOnlineUsers(users);});newSocket.on('notification',notification=>{console.log('New notification received:',notification);});// Socket'i hemen set et ama connected durumunu connect event'inde set et\nsetSocket(newSocket);// Eğer socket zaten bağlıysa connected'ı true yap\nif(newSocket.connected){console.log('Socket zaten bağlı, connected true yapılıyor');setConnected(true);}return()=>{console.log('Socket cleanup...');newSocket.close();};}else{setConnected(false);setOnlineUsers([]);if(socket){socket.close();setSocket(null);}}},[isAuthenticated,user]);// Real socket functions\nconst emitEvent=(eventName,data)=>{if(socket&&connected){socket.emit(eventName,data);return true;}return false;};const joinRoom=roomName=>{if(socket&&connected){socket.emit('joinRoom',roomName);return true;}return false;};const leaveRoom=roomName=>{if(socket&&connected){socket.emit('leaveRoom',roomName);return true;}return false;};const sendNotification=notification=>{if(socket&&connected){socket.emit('sendNotification',notification);return true;}return false;};const updateUserStatus=status=>{if(socket&&connected){socket.emit('updateStatus',status);return true;}return false;};const broadcastToRole=(role,message)=>{console.log('Mock broadcast to role:',role,message);return true;};const isUserOnline=userId=>{return onlineUsers.some(user=>user.userId===userId);};const getOnlineUsersByRole=role=>{return onlineUsers.filter(user=>user.role===role);};const getOnlineUsersCount=()=>{return onlineUsers.length;};const disconnectSocket=()=>{setConnected(false);setOnlineUsers([]);console.log('Mock socket disconnected');};const value={socket,// Gerçek socket\nconnected,onlineUsers,// Functions\nemitEvent,joinRoom,leaveRoom,sendNotification,updateUserStatus,broadcastToRole,// Utility functions\nisUserOnline,getOnlineUsersByRole,getOnlineUsersCount,// Control functions\ndisconnectSocket};return/*#__PURE__*/_jsx(SocketContext.Provider,{value:value,children:children});};// Hook to use socket context\nexport const useSocket=()=>{const context=useContext(SocketContext);if(!context){throw new Error('useSocket must be used within a SocketProvider');}return context;};export default SocketContext;","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useAuth","io","jsx","_jsx","SocketContext","SocketProvider","_ref","children","user","isAuthenticated","socket","setSocket","connected","setConnected","onlineUsers","setOnlineUsers","console","log","newSocket","auth","token","localStorage","getItem","transports","timeout","reconnection","reconnectionAttempts","reconnectionDelay","on","id","reason","error","attemptNumber","users","notification","close","emitEvent","eventName","data","emit","joinRoom","roomName","leaveRoom","sendNotification","updateUserStatus","status","broadcastToRole","role","message","isUserOnline","userId","some","getOnlineUsersByRole","filter","getOnlineUsersCount","length","disconnectSocket","value","Provider","useSocket","context","Error"],"sources":["/Users/hakankarahan/Desktop/fabrikayazilimi/frontend/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport { io } from 'socket.io-client';\n\n// Create context\nconst SocketContext = createContext();\n\n// Socket Provider Component\nexport const SocketProvider = ({ children }) => {\n  const { user, isAuthenticated } = useAuth();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n\n  // Real socket connection\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      console.log('Socket bağlantısı başlatılıyor...');\n      \n      const newSocket = io('http://192.168.1.101:5001', {\n        auth: {\n          token: localStorage.getItem('token')\n        },\n        transports: ['polling'],\n        timeout: 10000,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n\n      newSocket.on('connect', () => {\n        console.log('Socket connected:', newSocket.id);\n        setConnected(true);\n        setSocket(newSocket);\n      });\n\n      newSocket.on('disconnect', (reason) => {\n        console.log('Socket disconnected:', reason);\n        setConnected(false);\n        setOnlineUsers([]);\n      });\n\n      newSocket.on('connect_error', (error) => {\n        console.error('Socket connection error:', error);\n        setConnected(false);\n      });\n\n      newSocket.on('reconnect', (attemptNumber) => {\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\n        setConnected(true);\n      });\n\n      newSocket.on('onlineUsers', (users) => {\n        setOnlineUsers(users);\n      });\n\n      newSocket.on('notification', (notification) => {\n        console.log('New notification received:', notification);\n      });\n\n      // Socket'i hemen set et ama connected durumunu connect event'inde set et\n      setSocket(newSocket);\n      \n      // Eğer socket zaten bağlıysa connected'ı true yap\n      if (newSocket.connected) {\n        console.log('Socket zaten bağlı, connected true yapılıyor');\n        setConnected(true);\n      }\n\n      return () => {\n        console.log('Socket cleanup...');\n        newSocket.close();\n      };\n    } else {\n      setConnected(false);\n      setOnlineUsers([]);\n      if (socket) {\n        socket.close();\n        setSocket(null);\n      }\n    }\n  }, [isAuthenticated, user]);\n\n  // Real socket functions\n  const emitEvent = (eventName, data) => {\n    if (socket && connected) {\n      socket.emit(eventName, data);\n      return true;\n    }\n    return false;\n  };\n\n  const joinRoom = (roomName) => {\n    if (socket && connected) {\n      socket.emit('joinRoom', roomName);\n      return true;\n    }\n    return false;\n  };\n\n  const leaveRoom = (roomName) => {\n    if (socket && connected) {\n      socket.emit('leaveRoom', roomName);\n      return true;\n    }\n    return false;\n  };\n\n  const sendNotification = (notification) => {\n    if (socket && connected) {\n      socket.emit('sendNotification', notification);\n      return true;\n    }\n    return false;\n  };\n\n  const updateUserStatus = (status) => {\n    if (socket && connected) {\n      socket.emit('updateStatus', status);\n      return true;\n    }\n    return false;\n  };\n\n  const broadcastToRole = (role, message) => {\n    console.log('Mock broadcast to role:', role, message);\n    return true;\n  };\n\n  const isUserOnline = (userId) => {\n    return onlineUsers.some(user => user.userId === userId);\n  };\n\n  const getOnlineUsersByRole = (role) => {\n    return onlineUsers.filter(user => user.role === role);\n  };\n\n  const getOnlineUsersCount = () => {\n    return onlineUsers.length;\n  };\n\n  const disconnectSocket = () => {\n    setConnected(false);\n    setOnlineUsers([]);\n    console.log('Mock socket disconnected');\n  };\n\n  const value = {\n    socket, // Gerçek socket\n    connected,\n    onlineUsers,\n    \n    // Functions\n    emitEvent,\n    joinRoom,\n    leaveRoom,\n    sendNotification,\n    updateUserStatus,\n    broadcastToRole,\n    \n    // Utility functions\n    isUserOnline,\n    getOnlineUsersByRole,\n    getOnlineUsersCount,\n    \n    // Control functions\n    disconnectSocket,\n  };\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\n// Hook to use socket context\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport default SocketContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}