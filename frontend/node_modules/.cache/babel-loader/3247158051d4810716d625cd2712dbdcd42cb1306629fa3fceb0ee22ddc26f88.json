{"ast":null,"code":"import _objectSpread from\"/Users/hakankarahan/Desktop/fabrikayazilimi/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect,useCallback,useRef}from'react';import{toast}from'react-hot-toast';import{useAuth}from'./AuthContext';import api from'../services/api';// Initial state\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={notifications:[],unreadCount:0,loading:false,error:null,hasMore:true,page:1,limit:20};// Action types\nconst NOTIFICATION_ACTIONS={FETCH_START:'FETCH_START',FETCH_SUCCESS:'FETCH_SUCCESS',FETCH_ERROR:'FETCH_ERROR',ADD_NOTIFICATION:'ADD_NOTIFICATION',MARK_AS_READ:'MARK_AS_READ',MARK_ALL_AS_READ:'MARK_ALL_AS_READ',DELETE_NOTIFICATION:'DELETE_NOTIFICATION',UPDATE_UNREAD_COUNT:'UPDATE_UNREAD_COUNT',RESET_NOTIFICATIONS:'RESET_NOTIFICATIONS',LOAD_MORE_SUCCESS:'LOAD_MORE_SUCCESS'};// Reducer\nconst notificationReducer=(state,action)=>{switch(action.type){case NOTIFICATION_ACTIONS.FETCH_START:return _objectSpread(_objectSpread({},state),{},{loading:true,error:null});case NOTIFICATION_ACTIONS.FETCH_SUCCESS:return _objectSpread(_objectSpread({},state),{},{notifications:action.payload.notifications,unreadCount:action.payload.unreadCount,hasMore:action.payload.hasMore,page:action.payload.page,loading:false,error:null});case NOTIFICATION_ACTIONS.LOAD_MORE_SUCCESS:return _objectSpread(_objectSpread({},state),{},{notifications:[...(state.notifications||[]),...(action.payload.notifications||[])],hasMore:action.payload.hasMore,page:action.payload.page,loading:false});case NOTIFICATION_ACTIONS.FETCH_ERROR:return _objectSpread(_objectSpread({},state),{},{loading:false,error:action.payload});case NOTIFICATION_ACTIONS.ADD_NOTIFICATION:return _objectSpread(_objectSpread({},state),{},{notifications:[action.payload,...(state.notifications||[])],unreadCount:action.payload.read?state.unreadCount:state.unreadCount+1});case NOTIFICATION_ACTIONS.MARK_AS_READ:return _objectSpread(_objectSpread({},state),{},{notifications:(state.notifications||[]).map(notification=>notification.id===action.payload?_objectSpread(_objectSpread({},notification),{},{read:true,readAt:new Date().toISOString()}):notification),unreadCount:Math.max(0,state.unreadCount-1)});case NOTIFICATION_ACTIONS.MARK_ALL_AS_READ:return _objectSpread(_objectSpread({},state),{},{notifications:(state.notifications||[]).map(notification=>_objectSpread(_objectSpread({},notification),{},{read:true,readAt:new Date().toISOString()})),unreadCount:0});case NOTIFICATION_ACTIONS.DELETE_NOTIFICATION:const deletedNotification=(state.notifications||[]).find(n=>n.id===action.payload);return _objectSpread(_objectSpread({},state),{},{notifications:(state.notifications||[]).filter(notification=>notification.id!==action.payload),unreadCount:deletedNotification&&!deletedNotification.read?Math.max(0,state.unreadCount-1):state.unreadCount});case NOTIFICATION_ACTIONS.UPDATE_UNREAD_COUNT:return _objectSpread(_objectSpread({},state),{},{unreadCount:action.payload});case NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS:return initialState;default:return state;}};// Create context\nconst NotificationContext=/*#__PURE__*/createContext();// Notification Provider Component\nexport const NotificationProvider=_ref=>{let{children}=_ref;const{user,isAuthenticated}=useAuth();const[state,dispatch]=useReducer(notificationReducer,initialState);const fetchTimeoutRef=useRef(null);// Güvenlik kontrolü - state.notifications her zaman array olmalı\nconst safeState=_objectSpread(_objectSpread({},state),{},{notifications:state.notifications||[],unreadCount:state.unreadCount||0,loading:state.loading||false,error:state.error||null,hasMore:state.hasMore||false,page:state.page||1,limit:state.limit||20});// Fetch notifications with debouncing\nconst fetchNotifications=useCallback(async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let reset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(!isAuthenticated)return;// Clear existing timeout\nif(fetchTimeoutRef.current){clearTimeout(fetchTimeoutRef.current);}// Debounce the API call\nfetchTimeoutRef.current=setTimeout(async()=>{dispatch({type:NOTIFICATION_ACTIONS.FETCH_START});try{const response=await api.get('/notifications',{params:{page,limit:safeState.limit}});const responseData=response.data.data||response.data;const{notifications,pagination}=responseData;const unreadCount=responseData.unreadCount||0;const hasMore=pagination?pagination.current<pagination.pages:false;const currentPage=pagination?pagination.current:page;console.log('Fetched notifications:',notifications.length);console.log('Unread count:',unreadCount);if(reset||page===1){dispatch({type:NOTIFICATION_ACTIONS.FETCH_SUCCESS,payload:{notifications,unreadCount,hasMore,page:currentPage}});}else{dispatch({type:NOTIFICATION_ACTIONS.LOAD_MORE_SUCCESS,payload:{notifications,hasMore,page:currentPage}});}}catch(error){var _error$response,_error$response$data;console.error('Fetch notifications error:',error);dispatch({type:NOTIFICATION_ACTIONS.FETCH_ERROR,payload:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Bildirimler yüklenemedi'});}},300);// 300ms debounce\n},[isAuthenticated,state.limit]);// Load more notifications\nconst loadMore=useCallback(async()=>{if(state.loading||!state.hasMore)return;await fetchNotifications(state.page+1,false);},[fetchNotifications,state.loading,state.hasMore,state.page]);// Mark notification as read\nconst markAsRead=useCallback(async notificationId=>{try{await api.put(\"/notifications/\".concat(notificationId,\"/read\"));dispatch({type:NOTIFICATION_ACTIONS.MARK_AS_READ,payload:notificationId});}catch(error){console.error('Mark as read error:',error);toast.error('Bildirim okundu olarak işaretlenemedi');}},[]);// Mark all notifications as read\nconst markAllAsRead=useCallback(async()=>{try{await api.put('/notifications/mark-all-read');dispatch({type:NOTIFICATION_ACTIONS.MARK_ALL_AS_READ});toast.success('Tüm bildirimler okundu olarak işaretlendi');}catch(error){console.error('Mark all as read error:',error);toast.error('Bildirimler okundu olarak işaretlenemedi');}},[]);// Delete notification\nconst deleteNotification=useCallback(async notificationId=>{try{await api.delete(\"/notifications/\".concat(notificationId));dispatch({type:NOTIFICATION_ACTIONS.DELETE_NOTIFICATION,payload:notificationId});toast.success('Bildirim silindi');}catch(error){console.error('Delete notification error:',error);toast.error('Bildirim silinemedi');}},[]);// Get unread count\nconst fetchUnreadCount=useCallback(async()=>{if(!isAuthenticated)return;try{var _response$data$data;const response=await api.get('/notifications/unread-count');const count=((_response$data$data=response.data.data)===null||_response$data$data===void 0?void 0:_response$data$data.unreadCount)||response.data.unreadCount||0;console.log('Unread count response:',response.data);console.log('Parsed unread count:',count);dispatch({type:NOTIFICATION_ACTIONS.UPDATE_UNREAD_COUNT,payload:count});}catch(error){console.error('Fetch unread count error:',error);}},[isAuthenticated]);// Send notification (admin only)\nconst sendNotification=useCallback(async notificationData=>{try{const response=await api.post('/notifications',notificationData);toast.success('Bildirim gönderildi');return{success:true,notification:response.data.notification};}catch(error){var _error$response2,_error$response2$data;console.error('Send notification error:',error);const errorMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Bildirim gönderilemedi';toast.error(errorMessage);return{success:false,error:errorMessage};}},[]);// Bulk send notifications (admin only)\nconst sendBulkNotification=useCallback(async notificationData=>{try{const response=await api.post('/notifications/bulk',notificationData);toast.success(\"\".concat(response.data.sentCount,\" kullan\\u0131c\\u0131ya bildirim g\\xF6nderildi\"));return{success:true,sentCount:response.data.sentCount};}catch(error){var _error$response3,_error$response3$data;console.error('Send bulk notification error:',error);const errorMessage=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Toplu bildirim gönderilemedi';toast.error(errorMessage);return{success:false,error:errorMessage};}},[]);// Handle socket notifications\nuseEffect(()=>{const handleSocketNotification=event=>{const notification=event.detail;dispatch({type:NOTIFICATION_ACTIONS.ADD_NOTIFICATION,payload:notification});};window.addEventListener('socket_notification',handleSocketNotification);return()=>{window.removeEventListener('socket_notification',handleSocketNotification);};},[]);// Load notifications on auth change\nuseEffect(()=>{if(isAuthenticated&&user){console.log('Loading notifications for user:',user.username);fetchNotifications();fetchUnreadCount();}else{dispatch({type:NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS});}},[isAuthenticated,user]);// fetchNotifications ve fetchUnreadCount dependency'lerini kaldırdık\n// Periodic unread count update\nuseEffect(()=>{if(!isAuthenticated)return;const interval=setInterval(()=>{fetchUnreadCount();},30000);// Update every 30 seconds\nreturn()=>clearInterval(interval);},[isAuthenticated]);// fetchUnreadCount dependency'sini kaldırdık\n// Utility functions\nconst getNotificationsByType=useCallback(type=>{return safeState.notifications.filter(notification=>notification.type===type);},[safeState.notifications]);const getUnreadNotifications=useCallback(()=>{return safeState.notifications.filter(notification=>!notification.read);},[safeState.notifications]);const getNotificationById=useCallback(id=>{return safeState.notifications.find(notification=>notification.id===id);},[safeState.notifications]);const hasUnreadNotifications=useCallback(()=>{return safeState.unreadCount>0;},[safeState.unreadCount]);// Format notification time\nconst formatNotificationTime=useCallback(timestamp=>{const now=new Date();const notificationTime=new Date(timestamp);const diffInMinutes=Math.floor((now-notificationTime)/(1000*60));if(diffInMinutes<1)return'Şimdi';if(diffInMinutes<60)return\"\".concat(diffInMinutes,\" dakika \\xF6nce\");const diffInHours=Math.floor(diffInMinutes/60);if(diffInHours<24)return\"\".concat(diffInHours,\" saat \\xF6nce\");const diffInDays=Math.floor(diffInHours/24);if(diffInDays<7)return\"\".concat(diffInDays,\" g\\xFCn \\xF6nce\");return notificationTime.toLocaleDateString('tr-TR');},[]);// Search notifications\nconst searchNotifications=useCallback(query=>{try{if(!query)return safeState.notifications;const lowercaseQuery=query.toLowerCase();return safeState.notifications.filter(notification=>{var _notification$title,_notification$message,_notification$type;return(notification===null||notification===void 0?void 0:(_notification$title=notification.title)===null||_notification$title===void 0?void 0:_notification$title.toLowerCase().includes(lowercaseQuery))||(notification===null||notification===void 0?void 0:(_notification$message=notification.message)===null||_notification$message===void 0?void 0:_notification$message.toLowerCase().includes(lowercaseQuery))||(notification===null||notification===void 0?void 0:(_notification$type=notification.type)===null||_notification$type===void 0?void 0:_notification$type.toLowerCase().includes(lowercaseQuery));});}catch(error){console.error('Search notifications error:',error);return[];}},[safeState.notifications]);// Get notification icon\nconst getNotificationIcon=useCallback(type=>{switch(type){case'order_created':case'order_updated':return'📦';case'task_assigned':case'task_completed':return'📋';case'system_alert':return'⚠️';case'reminder':return'⏰';case'message':return'💬';case'user_action':return'👤';case'error':return'❌';case'success':return'✅';case'info':return'ℹ️';default:return'📢';}},[]);// Get notification color\nconst getNotificationColor=useCallback((type,priority)=>{if(priority==='urgent'||priority==='high'){return'bg-red-100 text-red-600';}switch(type){case'order_created':case'order_updated':return'bg-blue-100 text-blue-600';case'task_assigned':case'task_completed':return'bg-green-100 text-green-600';case'system_alert':return'bg-yellow-100 text-yellow-600';case'error':return'bg-red-100 text-red-600';case'success':return'bg-green-100 text-green-600';default:return'bg-gray-100 text-gray-600';}},[]);// Delete all notifications\nconst deleteAllNotifications=useCallback(async()=>{try{await api.delete('/notifications');dispatch({type:NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS});toast.success('Tüm bildirimler silindi');}catch(error){console.error('Delete all notifications error:',error);toast.error('Bildirimler silinemedi');}},[]);const value={// State\nnotifications:safeState.notifications,unreadCount:safeState.unreadCount,loading:safeState.loading,isLoading:safeState.loading,// Alias for compatibility\nerror:safeState.error,hasMore:safeState.hasMore,page:safeState.page,// Actions\nfetchNotifications,loadMore,markAsRead,markAllAsRead,deleteNotification,sendNotification,sendBulkNotification,fetchUnreadCount,// Utilities\ngetNotificationsByType,getUnreadNotifications,getNotificationById,hasUnreadNotifications,formatNotificationTime,searchNotifications,getNotificationIcon,getNotificationColor,deleteAllNotifications};// Cleanup timeout on unmount\nuseEffect(()=>{return()=>{if(fetchTimeoutRef.current){clearTimeout(fetchTimeoutRef.current);}};},[]);return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:value,children:children});};// Custom hook to use notification context\nexport const useNotification=()=>{const context=useContext(NotificationContext);if(!context){throw new Error('useNotification must be used within a NotificationProvider');}return context;};export default NotificationContext;","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useCallback","useRef","toast","useAuth","api","jsx","_jsx","initialState","notifications","unreadCount","loading","error","hasMore","page","limit","NOTIFICATION_ACTIONS","FETCH_START","FETCH_SUCCESS","FETCH_ERROR","ADD_NOTIFICATION","MARK_AS_READ","MARK_ALL_AS_READ","DELETE_NOTIFICATION","UPDATE_UNREAD_COUNT","RESET_NOTIFICATIONS","LOAD_MORE_SUCCESS","notificationReducer","state","action","type","_objectSpread","payload","read","map","notification","id","readAt","Date","toISOString","Math","max","deletedNotification","find","n","filter","NotificationContext","NotificationProvider","_ref","children","user","isAuthenticated","dispatch","fetchTimeoutRef","safeState","fetchNotifications","arguments","length","undefined","reset","current","clearTimeout","setTimeout","response","get","params","responseData","data","pagination","pages","currentPage","console","log","_error$response","_error$response$data","message","loadMore","markAsRead","notificationId","put","concat","markAllAsRead","success","deleteNotification","delete","fetchUnreadCount","_response$data$data","count","sendNotification","notificationData","post","_error$response2","_error$response2$data","errorMessage","sendBulkNotification","sentCount","_error$response3","_error$response3$data","handleSocketNotification","event","detail","window","addEventListener","removeEventListener","username","interval","setInterval","clearInterval","getNotificationsByType","getUnreadNotifications","getNotificationById","hasUnreadNotifications","formatNotificationTime","timestamp","now","notificationTime","diffInMinutes","floor","diffInHours","diffInDays","toLocaleDateString","searchNotifications","query","lowercaseQuery","toLowerCase","_notification$title","_notification$message","_notification$type","title","includes","getNotificationIcon","getNotificationColor","priority","deleteAllNotifications","value","isLoading","Provider","useNotification","context","Error"],"sources":["/Users/hakankarahan/Desktop/fabrikayazilimi/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\nimport api from '../services/api';\n\n// Initial state\nconst initialState = {\n  notifications: [],\n  unreadCount: 0,\n  loading: false,\n  error: null,\n  hasMore: true,\n  page: 1,\n  limit: 20,\n};\n\n// Action types\nconst NOTIFICATION_ACTIONS = {\n  FETCH_START: 'FETCH_START',\n  FETCH_SUCCESS: 'FETCH_SUCCESS',\n  FETCH_ERROR: 'FETCH_ERROR',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  MARK_AS_READ: 'MARK_AS_READ',\n  MARK_ALL_AS_READ: 'MARK_ALL_AS_READ',\n  DELETE_NOTIFICATION: 'DELETE_NOTIFICATION',\n  UPDATE_UNREAD_COUNT: 'UPDATE_UNREAD_COUNT',\n  RESET_NOTIFICATIONS: 'RESET_NOTIFICATIONS',\n  LOAD_MORE_SUCCESS: 'LOAD_MORE_SUCCESS',\n};\n\n// Reducer\nconst notificationReducer = (state, action) => {\n  switch (action.type) {\n    case NOTIFICATION_ACTIONS.FETCH_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case NOTIFICATION_ACTIONS.FETCH_SUCCESS:\n      return {\n        ...state,\n        notifications: action.payload.notifications,\n        unreadCount: action.payload.unreadCount,\n        hasMore: action.payload.hasMore,\n        page: action.payload.page,\n        loading: false,\n        error: null,\n      };\n\n    case NOTIFICATION_ACTIONS.LOAD_MORE_SUCCESS:\n      return {\n        ...state,\n        notifications: [...(state.notifications || []), ...(action.payload.notifications || [])],\n        hasMore: action.payload.hasMore,\n        page: action.payload.page,\n        loading: false,\n      };\n\n    case NOTIFICATION_ACTIONS.FETCH_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    case NOTIFICATION_ACTIONS.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [action.payload, ...(state.notifications || [])],\n        unreadCount: action.payload.read ? state.unreadCount : state.unreadCount + 1,\n      };\n\n    case NOTIFICATION_ACTIONS.MARK_AS_READ:\n      return {\n        ...state,\n        notifications: (state.notifications || []).map(notification =>\n          notification.id === action.payload\n            ? { ...notification, read: true, readAt: new Date().toISOString() }\n            : notification\n        ),\n        unreadCount: Math.max(0, state.unreadCount - 1),\n      };\n\n    case NOTIFICATION_ACTIONS.MARK_ALL_AS_READ:\n      return {\n        ...state,\n        notifications: (state.notifications || []).map(notification => ({\n          ...notification,\n          read: true,\n          readAt: new Date().toISOString(),\n        })),\n        unreadCount: 0,\n      };\n\n    case NOTIFICATION_ACTIONS.DELETE_NOTIFICATION:\n      const deletedNotification = (state.notifications || []).find(n => n.id === action.payload);\n      return {\n        ...state,\n        notifications: (state.notifications || []).filter(notification => notification.id !== action.payload),\n        unreadCount: deletedNotification && !deletedNotification.read \n          ? Math.max(0, state.unreadCount - 1) \n          : state.unreadCount,\n      };\n\n    case NOTIFICATION_ACTIONS.UPDATE_UNREAD_COUNT:\n      return {\n        ...state,\n        unreadCount: action.payload,\n      };\n\n    case NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst NotificationContext = createContext();\n\n// Notification Provider Component\nexport const NotificationProvider = ({ children }) => {\n  const { user, isAuthenticated } = useAuth();\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\n  const fetchTimeoutRef = useRef(null);\n\n  // Güvenlik kontrolü - state.notifications her zaman array olmalı\n  const safeState = {\n    ...state,\n    notifications: state.notifications || [],\n    unreadCount: state.unreadCount || 0,\n    loading: state.loading || false,\n    error: state.error || null,\n    hasMore: state.hasMore || false,\n    page: state.page || 1,\n    limit: state.limit || 20\n  };\n\n  // Fetch notifications with debouncing\n  const fetchNotifications = useCallback(async (page = 1, reset = true) => {\n    if (!isAuthenticated) return;\n\n    // Clear existing timeout\n    if (fetchTimeoutRef.current) {\n      clearTimeout(fetchTimeoutRef.current);\n    }\n\n    // Debounce the API call\n    fetchTimeoutRef.current = setTimeout(async () => {\n      dispatch({ type: NOTIFICATION_ACTIONS.FETCH_START });\n\n      try {\n        const response = await api.get('/notifications', {\n          params: {\n            page,\n            limit: safeState.limit,\n          },\n        });\n\n        const responseData = response.data.data || response.data;\n        const { notifications, pagination } = responseData;\n        const unreadCount = responseData.unreadCount || 0;\n        const hasMore = pagination ? pagination.current < pagination.pages : false;\n        const currentPage = pagination ? pagination.current : page;\n        \n        console.log('Fetched notifications:', notifications.length);\n        console.log('Unread count:', unreadCount);\n\n        if (reset || page === 1) {\n          dispatch({\n            type: NOTIFICATION_ACTIONS.FETCH_SUCCESS,\n            payload: {\n              notifications,\n              unreadCount,\n              hasMore,\n              page: currentPage,\n            },\n          });\n        } else {\n          dispatch({\n            type: NOTIFICATION_ACTIONS.LOAD_MORE_SUCCESS,\n            payload: {\n              notifications,\n              hasMore,\n              page: currentPage,\n            },\n          });\n        }\n      } catch (error) {\n        console.error('Fetch notifications error:', error);\n        dispatch({\n          type: NOTIFICATION_ACTIONS.FETCH_ERROR,\n          payload: error.response?.data?.message || 'Bildirimler yüklenemedi',\n        });\n      }\n    }, 300); // 300ms debounce\n  }, [isAuthenticated, state.limit]);\n\n  // Load more notifications\n  const loadMore = useCallback(async () => {\n    if (state.loading || !state.hasMore) return;\n    await fetchNotifications(state.page + 1, false);\n  }, [fetchNotifications, state.loading, state.hasMore, state.page]);\n\n  // Mark notification as read\n  const markAsRead = useCallback(async (notificationId) => {\n    try {\n      await api.put(`/notifications/${notificationId}/read`);\n      dispatch({\n        type: NOTIFICATION_ACTIONS.MARK_AS_READ,\n        payload: notificationId,\n      });\n    } catch (error) {\n      console.error('Mark as read error:', error);\n      toast.error('Bildirim okundu olarak işaretlenemedi');\n    }\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(async () => {\n    try {\n      await api.put('/notifications/mark-all-read');\n      dispatch({ type: NOTIFICATION_ACTIONS.MARK_ALL_AS_READ });\n      toast.success('Tüm bildirimler okundu olarak işaretlendi');\n    } catch (error) {\n      console.error('Mark all as read error:', error);\n      toast.error('Bildirimler okundu olarak işaretlenemedi');\n    }\n  }, []);\n\n  // Delete notification\n  const deleteNotification = useCallback(async (notificationId) => {\n    try {\n      await api.delete(`/notifications/${notificationId}`);\n      dispatch({\n        type: NOTIFICATION_ACTIONS.DELETE_NOTIFICATION,\n        payload: notificationId,\n      });\n      toast.success('Bildirim silindi');\n    } catch (error) {\n      console.error('Delete notification error:', error);\n      toast.error('Bildirim silinemedi');\n    }\n  }, []);\n\n  // Get unread count\n  const fetchUnreadCount = useCallback(async () => {\n    if (!isAuthenticated) return;\n\n    try {\n      const response = await api.get('/notifications/unread-count');\n      const count = response.data.data?.unreadCount || response.data.unreadCount || 0;\n      console.log('Unread count response:', response.data);\n      console.log('Parsed unread count:', count);\n      dispatch({\n        type: NOTIFICATION_ACTIONS.UPDATE_UNREAD_COUNT,\n        payload: count,\n      });\n    } catch (error) {\n      console.error('Fetch unread count error:', error);\n    }\n  }, [isAuthenticated]);\n\n  // Send notification (admin only)\n  const sendNotification = useCallback(async (notificationData) => {\n    try {\n      const response = await api.post('/notifications', notificationData);\n      toast.success('Bildirim gönderildi');\n      return { success: true, notification: response.data.notification };\n    } catch (error) {\n      console.error('Send notification error:', error);\n      const errorMessage = error.response?.data?.message || 'Bildirim gönderilemedi';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  }, []);\n\n  // Bulk send notifications (admin only)\n  const sendBulkNotification = useCallback(async (notificationData) => {\n    try {\n      const response = await api.post('/notifications/bulk', notificationData);\n      toast.success(`${response.data.sentCount} kullanıcıya bildirim gönderildi`);\n      return { success: true, sentCount: response.data.sentCount };\n    } catch (error) {\n      console.error('Send bulk notification error:', error);\n      const errorMessage = error.response?.data?.message || 'Toplu bildirim gönderilemedi';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  }, []);\n\n  // Handle socket notifications\n  useEffect(() => {\n    const handleSocketNotification = (event) => {\n      const notification = event.detail;\n      dispatch({\n        type: NOTIFICATION_ACTIONS.ADD_NOTIFICATION,\n        payload: notification,\n      });\n    };\n\n    window.addEventListener('socket_notification', handleSocketNotification);\n    return () => {\n      window.removeEventListener('socket_notification', handleSocketNotification);\n    };\n  }, []);\n\n  // Load notifications on auth change\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      console.log('Loading notifications for user:', user.username);\n      fetchNotifications();\n      fetchUnreadCount();\n    } else {\n      dispatch({ type: NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS });\n    }\n  }, [isAuthenticated, user]); // fetchNotifications ve fetchUnreadCount dependency'lerini kaldırdık\n\n  // Periodic unread count update\n  useEffect(() => {\n    if (!isAuthenticated) return;\n\n    const interval = setInterval(() => {\n      fetchUnreadCount();\n    }, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [isAuthenticated]); // fetchUnreadCount dependency'sini kaldırdık\n\n  // Utility functions\n  const getNotificationsByType = useCallback((type) => {\n    return safeState.notifications.filter(notification => notification.type === type);\n  }, [safeState.notifications]);\n\n  const getUnreadNotifications = useCallback(() => {\n    return safeState.notifications.filter(notification => !notification.read);\n  }, [safeState.notifications]);\n\n  const getNotificationById = useCallback((id) => {\n    return safeState.notifications.find(notification => notification.id === id);\n  }, [safeState.notifications]);\n\n  const hasUnreadNotifications = useCallback(() => {\n    return safeState.unreadCount > 0;\n  }, [safeState.unreadCount]);\n\n  // Format notification time\n  const formatNotificationTime = useCallback((timestamp) => {\n    const now = new Date();\n    const notificationTime = new Date(timestamp);\n    const diffInMinutes = Math.floor((now - notificationTime) / (1000 * 60));\n\n    if (diffInMinutes < 1) return 'Şimdi';\n    if (diffInMinutes < 60) return `${diffInMinutes} dakika önce`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours} saat önce`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays} gün önce`;\n    \n    return notificationTime.toLocaleDateString('tr-TR');\n  }, []);\n\n  // Search notifications\n  const searchNotifications = useCallback((query) => {\n    try {\n      if (!query) return safeState.notifications;\n      const lowercaseQuery = query.toLowerCase();\n      return safeState.notifications.filter(notification => \n        notification?.title?.toLowerCase().includes(lowercaseQuery) ||\n        notification?.message?.toLowerCase().includes(lowercaseQuery) ||\n        notification?.type?.toLowerCase().includes(lowercaseQuery)\n      );\n    } catch (error) {\n      console.error('Search notifications error:', error);\n      return [];\n    }\n  }, [safeState.notifications]);\n\n  // Get notification icon\n  const getNotificationIcon = useCallback((type) => {\n    switch (type) {\n      case 'order_created':\n      case 'order_updated':\n        return '📦';\n      case 'task_assigned':\n      case 'task_completed':\n        return '📋';\n      case 'system_alert':\n        return '⚠️';\n      case 'reminder':\n        return '⏰';\n      case 'message':\n        return '💬';\n      case 'user_action':\n        return '👤';\n      case 'error':\n        return '❌';\n      case 'success':\n        return '✅';\n      case 'info':\n        return 'ℹ️';\n      default:\n        return '📢';\n    }\n  }, []);\n\n  // Get notification color\n  const getNotificationColor = useCallback((type, priority) => {\n    if (priority === 'urgent' || priority === 'high') {\n      return 'bg-red-100 text-red-600';\n    }\n    \n    switch (type) {\n      case 'order_created':\n      case 'order_updated':\n        return 'bg-blue-100 text-blue-600';\n      case 'task_assigned':\n      case 'task_completed':\n        return 'bg-green-100 text-green-600';\n      case 'system_alert':\n        return 'bg-yellow-100 text-yellow-600';\n      case 'error':\n        return 'bg-red-100 text-red-600';\n      case 'success':\n        return 'bg-green-100 text-green-600';\n      default:\n        return 'bg-gray-100 text-gray-600';\n    }\n  }, []);\n\n  // Delete all notifications\n  const deleteAllNotifications = useCallback(async () => {\n    try {\n      await api.delete('/notifications');\n      dispatch({ type: NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS });\n      toast.success('Tüm bildirimler silindi');\n    } catch (error) {\n      console.error('Delete all notifications error:', error);\n      toast.error('Bildirimler silinemedi');\n    }\n  }, []);\n\n  const value = {\n    // State\n    notifications: safeState.notifications,\n    unreadCount: safeState.unreadCount,\n    loading: safeState.loading,\n    isLoading: safeState.loading, // Alias for compatibility\n    error: safeState.error,\n    hasMore: safeState.hasMore,\n    page: safeState.page,\n\n    // Actions\n    fetchNotifications,\n    loadMore,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    sendNotification,\n    sendBulkNotification,\n    fetchUnreadCount,\n\n    // Utilities\n    getNotificationsByType,\n    getUnreadNotifications,\n    getNotificationById,\n    hasUnreadNotifications,\n    formatNotificationTime,\n    searchNotifications,\n    getNotificationIcon,\n    getNotificationColor,\n    deleteAllNotifications,\n  };\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (fetchTimeoutRef.current) {\n        clearTimeout(fetchTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\n// Custom hook to use notification context\nexport const useNotification = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport default NotificationContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}