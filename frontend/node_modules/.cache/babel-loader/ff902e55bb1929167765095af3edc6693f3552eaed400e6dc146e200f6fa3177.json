{"ast":null,"code":"// Network utilities for mobile app\nexport const getBackendUrl = async () => {\n  // Check if running in Capacitor (mobile app)\n  if (window.Capacitor) {\n    try {\n      // Try to get device IP address\n      const {\n        Network\n      } = await import('@capacitor/network');\n      const status = await Network.getStatus();\n      if (status.connected && status.connectionType === 'wifi') {\n        // If connected to WiFi, try to detect the network\n        // For now, use the configured IP\n        return process.env.REACT_APP_API_URL || 'http://192.168.1.101:5001/api';\n      }\n    } catch (error) {\n      console.log('Network detection failed, using fallback URL');\n    }\n\n    // Fallback to configured URL\n    return process.env.REACT_APP_API_URL || 'http://192.168.1.101:5001/api';\n  }\n\n  // For web browser, use localhost\n  return process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n};\nexport const getSocketUrl = async () => {\n  // Check if running in Capacitor (mobile app)\n  if (window.Capacitor) {\n    try {\n      // Try to get device IP address\n      const {\n        Network\n      } = await import('@capacitor/network');\n      const status = await Network.getStatus();\n      if (status.connected && status.connectionType === 'wifi') {\n        // If connected to WiFi, try to detect the network\n        // For now, use the configured IP\n        return process.env.REACT_APP_SOCKET_URL || 'http://192.168.1.101:5001';\n      }\n    } catch (error) {\n      console.log('Network detection failed, using fallback URL');\n    }\n\n    // Fallback to configured URL\n    return process.env.REACT_APP_SOCKET_URL || 'http://192.168.1.101:5001';\n  }\n\n  // For web browser, use localhost\n  return process.env.REACT_APP_SOCKET_URL || 'http://localhost:5001';\n};\n\n// Test connection to backend\nexport const testBackendConnection = async url => {\n  try {\n    const response = await fetch(`${url}/health`, {\n      method: 'GET',\n      timeout: 5000\n    });\n    return response.ok;\n  } catch (error) {\n    console.log('Backend connection test failed:', error);\n    return false;\n  }\n};\n\n// Auto-detect backend URL\nexport const autoDetectBackendUrl = async () => {\n  const possibleUrls = ['http://192.168.1.101:5001/api', 'http://10.0.2.2:5001/api',\n  // Android emulator\n  'http://localhost:5001/api', 'http://127.0.0.1:5001/api'];\n  for (const url of possibleUrls) {\n    console.log(`Testing backend URL: ${url}`);\n    const isConnected = await testBackendConnection(url);\n    if (isConnected) {\n      console.log(`✅ Backend found at: ${url}`);\n      return url;\n    }\n  }\n  console.log('❌ No backend found, using fallback');\n  return possibleUrls[0]; // Return first URL as fallback\n};","map":{"version":3,"names":["getBackendUrl","window","Capacitor","Network","status","getStatus","connected","connectionType","process","env","REACT_APP_API_URL","error","console","log","getSocketUrl","REACT_APP_SOCKET_URL","testBackendConnection","url","response","fetch","method","timeout","ok","autoDetectBackendUrl","possibleUrls","isConnected"],"sources":["/Users/hakankarahan/Desktop/fabrikayazilimi/frontend/src/utils/networkUtils.js"],"sourcesContent":["// Network utilities for mobile app\nexport const getBackendUrl = async () => {\n  // Check if running in Capacitor (mobile app)\n  if (window.Capacitor) {\n    try {\n      // Try to get device IP address\n      const { Network } = await import('@capacitor/network');\n      const status = await Network.getStatus();\n      \n      if (status.connected && status.connectionType === 'wifi') {\n        // If connected to WiFi, try to detect the network\n        // For now, use the configured IP\n        return process.env.REACT_APP_API_URL || 'http://192.168.1.101:5001/api';\n      }\n    } catch (error) {\n      console.log('Network detection failed, using fallback URL');\n    }\n    \n    // Fallback to configured URL\n    return process.env.REACT_APP_API_URL || 'http://192.168.1.101:5001/api';\n  }\n  \n  // For web browser, use localhost\n  return process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n};\n\nexport const getSocketUrl = async () => {\n  // Check if running in Capacitor (mobile app)\n  if (window.Capacitor) {\n    try {\n      // Try to get device IP address\n      const { Network } = await import('@capacitor/network');\n      const status = await Network.getStatus();\n      \n      if (status.connected && status.connectionType === 'wifi') {\n        // If connected to WiFi, try to detect the network\n        // For now, use the configured IP\n        return process.env.REACT_APP_SOCKET_URL || 'http://192.168.1.101:5001';\n      }\n    } catch (error) {\n      console.log('Network detection failed, using fallback URL');\n    }\n    \n    // Fallback to configured URL\n    return process.env.REACT_APP_SOCKET_URL || 'http://192.168.1.101:5001';\n  }\n  \n  // For web browser, use localhost\n  return process.env.REACT_APP_SOCKET_URL || 'http://localhost:5001';\n};\n\n// Test connection to backend\nexport const testBackendConnection = async (url) => {\n  try {\n    const response = await fetch(`${url}/health`, {\n      method: 'GET',\n      timeout: 5000\n    });\n    return response.ok;\n  } catch (error) {\n    console.log('Backend connection test failed:', error);\n    return false;\n  }\n};\n\n// Auto-detect backend URL\nexport const autoDetectBackendUrl = async () => {\n  const possibleUrls = [\n    'http://192.168.1.101:5001/api',\n    'http://10.0.2.2:5001/api', // Android emulator\n    'http://localhost:5001/api',\n    'http://127.0.0.1:5001/api'\n  ];\n  \n  for (const url of possibleUrls) {\n    console.log(`Testing backend URL: ${url}`);\n    const isConnected = await testBackendConnection(url);\n    if (isConnected) {\n      console.log(`✅ Backend found at: ${url}`);\n      return url;\n    }\n  }\n  \n  console.log('❌ No backend found, using fallback');\n  return possibleUrls[0]; // Return first URL as fallback\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC;EACA,IAAIC,MAAM,CAACC,SAAS,EAAE;IACpB,IAAI;MACF;MACA,MAAM;QAAEC;MAAQ,CAAC,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC;MACtD,MAAMC,MAAM,GAAG,MAAMD,OAAO,CAACE,SAAS,CAAC,CAAC;MAExC,IAAID,MAAM,CAACE,SAAS,IAAIF,MAAM,CAACG,cAAc,KAAK,MAAM,EAAE;QACxD;QACA;QACA,OAAOC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,+BAA+B;MACzE;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;IAC7D;;IAEA;IACA,OAAOL,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,+BAA+B;EACzE;;EAEA;EACA,OAAOF,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AACrE,CAAC;AAED,OAAO,MAAMI,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC;EACA,IAAIb,MAAM,CAACC,SAAS,EAAE;IACpB,IAAI;MACF;MACA,MAAM;QAAEC;MAAQ,CAAC,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC;MACtD,MAAMC,MAAM,GAAG,MAAMD,OAAO,CAACE,SAAS,CAAC,CAAC;MAExC,IAAID,MAAM,CAACE,SAAS,IAAIF,MAAM,CAACG,cAAc,KAAK,MAAM,EAAE;QACxD;QACA;QACA,OAAOC,OAAO,CAACC,GAAG,CAACM,oBAAoB,IAAI,2BAA2B;MACxE;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;IAC7D;;IAEA;IACA,OAAOL,OAAO,CAACC,GAAG,CAACM,oBAAoB,IAAI,2BAA2B;EACxE;;EAEA;EACA,OAAOP,OAAO,CAACC,GAAG,CAACM,oBAAoB,IAAI,uBAAuB;AACpE,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,GAAG,IAAK;EAClD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGF,GAAG,SAAS,EAAE;MAC5CG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;IACX,CAAC,CAAC;IACF,OAAOH,QAAQ,CAACI,EAAE;EACpB,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,KAAK,CAAC;IACrD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC9C,MAAMC,YAAY,GAAG,CACnB,+BAA+B,EAC/B,0BAA0B;EAAE;EAC5B,2BAA2B,EAC3B,2BAA2B,CAC5B;EAED,KAAK,MAAMP,GAAG,IAAIO,YAAY,EAAE;IAC9BZ,OAAO,CAACC,GAAG,CAAC,wBAAwBI,GAAG,EAAE,CAAC;IAC1C,MAAMQ,WAAW,GAAG,MAAMT,qBAAqB,CAACC,GAAG,CAAC;IACpD,IAAIQ,WAAW,EAAE;MACfb,OAAO,CAACC,GAAG,CAAC,uBAAuBI,GAAG,EAAE,CAAC;MACzC,OAAOA,GAAG;IACZ;EACF;EAEAL,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;EACjD,OAAOW,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}