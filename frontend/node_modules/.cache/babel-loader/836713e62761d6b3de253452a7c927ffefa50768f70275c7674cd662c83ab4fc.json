{"ast":null,"code":"var _jsxFileName = \"/Users/hakankarahan/Desktop/fabrikayazilimi/frontend/src/contexts/SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport { io } from 'socket.io-client';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\n\n// Socket Provider Component\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n\n  // Dynamic Socket URL detection\n  const getSocketUrl = () => {\n    // Check if running in Capacitor (mobile app)\n    if (window.Capacitor) {\n      // For mobile app, use the configured IP\n      return process.env.REACT_APP_SOCKET_URL || 'http://192.168.1.101:5001';\n    }\n\n    // For web browser, use localhost\n    return process.env.REACT_APP_SOCKET_URL || 'http://localhost:5001';\n  };\n\n  // Real socket connection\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      console.log('Socket bağlantısı başlatılıyor...');\n      const newSocket = io(getSocketUrl(), {\n        auth: {\n          token: localStorage.getItem('token')\n        },\n        transports: ['polling'],\n        timeout: 10000,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n      newSocket.on('connect', () => {\n        console.log('Socket connected:', newSocket.id);\n        setConnected(true);\n        setSocket(newSocket);\n      });\n      newSocket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        setConnected(false);\n        setOnlineUsers([]);\n      });\n      newSocket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n        setConnected(false);\n      });\n      newSocket.on('reconnect', attemptNumber => {\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\n        setConnected(true);\n      });\n      newSocket.on('onlineUsers', users => {\n        setOnlineUsers(users);\n      });\n      newSocket.on('notification', notification => {\n        console.log('New notification received:', notification);\n      });\n\n      // Socket'i hemen set et ama connected durumunu connect event'inde set et\n      setSocket(newSocket);\n\n      // Eğer socket zaten bağlıysa connected'ı true yap\n      if (newSocket.connected) {\n        console.log('Socket zaten bağlı, connected true yapılıyor');\n        setConnected(true);\n      }\n      return () => {\n        console.log('Socket cleanup...');\n        newSocket.close();\n      };\n    } else {\n      setConnected(false);\n      setOnlineUsers([]);\n      if (socket) {\n        socket.close();\n        setSocket(null);\n      }\n    }\n  }, [isAuthenticated, user]);\n\n  // Real socket functions\n  const emitEvent = (eventName, data) => {\n    if (socket && connected) {\n      socket.emit(eventName, data);\n      return true;\n    }\n    return false;\n  };\n  const joinRoom = roomName => {\n    if (socket && connected) {\n      socket.emit('joinRoom', roomName);\n      return true;\n    }\n    return false;\n  };\n  const leaveRoom = roomName => {\n    if (socket && connected) {\n      socket.emit('leaveRoom', roomName);\n      return true;\n    }\n    return false;\n  };\n  const sendNotification = notification => {\n    if (socket && connected) {\n      socket.emit('sendNotification', notification);\n      return true;\n    }\n    return false;\n  };\n  const updateUserStatus = status => {\n    if (socket && connected) {\n      socket.emit('updateStatus', status);\n      return true;\n    }\n    return false;\n  };\n  const broadcastToRole = (role, message) => {\n    console.log('Mock broadcast to role:', role, message);\n    return true;\n  };\n  const isUserOnline = userId => {\n    return onlineUsers.some(user => user.userId === userId);\n  };\n  const getOnlineUsersByRole = role => {\n    return onlineUsers.filter(user => user.role === role);\n  };\n  const getOnlineUsersCount = () => {\n    return onlineUsers.length;\n  };\n  const disconnectSocket = () => {\n    setConnected(false);\n    setOnlineUsers([]);\n    console.log('Mock socket disconnected');\n  };\n  const value = {\n    socket,\n    // Gerçek socket\n    connected,\n    onlineUsers,\n    // Functions\n    emitEvent,\n    joinRoom,\n    leaveRoom,\n    sendNotification,\n    updateUserStatus,\n    broadcastToRole,\n    // Utility functions\n    isUserOnline,\n    getOnlineUsersByRole,\n    getOnlineUsersCount,\n    // Control functions\n    disconnectSocket\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook to use socket context\n_s(SocketProvider, \"4ozYEU3tEKVM6ugMf7t7fW/MguI=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default SocketContext;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useAuth","io","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","user","isAuthenticated","socket","setSocket","connected","setConnected","onlineUsers","setOnlineUsers","getSocketUrl","window","Capacitor","process","env","REACT_APP_SOCKET_URL","console","log","newSocket","auth","token","localStorage","getItem","transports","timeout","reconnection","reconnectionAttempts","reconnectionDelay","on","id","reason","error","attemptNumber","users","notification","close","emitEvent","eventName","data","emit","joinRoom","roomName","leaveRoom","sendNotification","updateUserStatus","status","broadcastToRole","role","message","isUserOnline","userId","some","getOnlineUsersByRole","filter","getOnlineUsersCount","length","disconnectSocket","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["/Users/hakankarahan/Desktop/fabrikayazilimi/frontend/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport { io } from 'socket.io-client';\n\n// Create context\nconst SocketContext = createContext();\n\n// Socket Provider Component\nexport const SocketProvider = ({ children }) => {\n  const { user, isAuthenticated } = useAuth();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n\n  // Dynamic Socket URL detection\n  const getSocketUrl = () => {\n    // Check if running in Capacitor (mobile app)\n    if (window.Capacitor) {\n      // For mobile app, use the configured IP\n      return process.env.REACT_APP_SOCKET_URL || 'http://192.168.1.101:5001';\n    }\n    \n    // For web browser, use localhost\n    return process.env.REACT_APP_SOCKET_URL || 'http://localhost:5001';\n  };\n\n  // Real socket connection\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      console.log('Socket bağlantısı başlatılıyor...');\n      \n      const newSocket = io(getSocketUrl(), {\n        auth: {\n          token: localStorage.getItem('token')\n        },\n        transports: ['polling'],\n        timeout: 10000,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n\n      newSocket.on('connect', () => {\n        console.log('Socket connected:', newSocket.id);\n        setConnected(true);\n        setSocket(newSocket);\n      });\n\n      newSocket.on('disconnect', (reason) => {\n        console.log('Socket disconnected:', reason);\n        setConnected(false);\n        setOnlineUsers([]);\n      });\n\n      newSocket.on('connect_error', (error) => {\n        console.error('Socket connection error:', error);\n        setConnected(false);\n      });\n\n      newSocket.on('reconnect', (attemptNumber) => {\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\n        setConnected(true);\n      });\n\n      newSocket.on('onlineUsers', (users) => {\n        setOnlineUsers(users);\n      });\n\n      newSocket.on('notification', (notification) => {\n        console.log('New notification received:', notification);\n      });\n\n      // Socket'i hemen set et ama connected durumunu connect event'inde set et\n      setSocket(newSocket);\n      \n      // Eğer socket zaten bağlıysa connected'ı true yap\n      if (newSocket.connected) {\n        console.log('Socket zaten bağlı, connected true yapılıyor');\n        setConnected(true);\n      }\n\n      return () => {\n        console.log('Socket cleanup...');\n        newSocket.close();\n      };\n    } else {\n      setConnected(false);\n      setOnlineUsers([]);\n      if (socket) {\n        socket.close();\n        setSocket(null);\n      }\n    }\n  }, [isAuthenticated, user]);\n\n  // Real socket functions\n  const emitEvent = (eventName, data) => {\n    if (socket && connected) {\n      socket.emit(eventName, data);\n      return true;\n    }\n    return false;\n  };\n\n  const joinRoom = (roomName) => {\n    if (socket && connected) {\n      socket.emit('joinRoom', roomName);\n      return true;\n    }\n    return false;\n  };\n\n  const leaveRoom = (roomName) => {\n    if (socket && connected) {\n      socket.emit('leaveRoom', roomName);\n      return true;\n    }\n    return false;\n  };\n\n  const sendNotification = (notification) => {\n    if (socket && connected) {\n      socket.emit('sendNotification', notification);\n      return true;\n    }\n    return false;\n  };\n\n  const updateUserStatus = (status) => {\n    if (socket && connected) {\n      socket.emit('updateStatus', status);\n      return true;\n    }\n    return false;\n  };\n\n  const broadcastToRole = (role, message) => {\n    console.log('Mock broadcast to role:', role, message);\n    return true;\n  };\n\n  const isUserOnline = (userId) => {\n    return onlineUsers.some(user => user.userId === userId);\n  };\n\n  const getOnlineUsersByRole = (role) => {\n    return onlineUsers.filter(user => user.role === role);\n  };\n\n  const getOnlineUsersCount = () => {\n    return onlineUsers.length;\n  };\n\n  const disconnectSocket = () => {\n    setConnected(false);\n    setOnlineUsers([]);\n    console.log('Mock socket disconnected');\n  };\n\n  const value = {\n    socket, // Gerçek socket\n    connected,\n    onlineUsers,\n    \n    // Functions\n    emitEvent,\n    joinRoom,\n    leaveRoom,\n    sendNotification,\n    updateUserStatus,\n    broadcastToRole,\n    \n    // Utility functions\n    isUserOnline,\n    getOnlineUsersByRole,\n    getOnlineUsersCount,\n    \n    // Control functions\n    disconnectSocket,\n  };\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\n// Hook to use socket context\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport default SocketContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}