{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nfunction translatedConnection() {\n  const connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n  let result = 'unknown';\n  const type = connection ? connection.type || connection.effectiveType : null;\n  if (type && typeof type === 'string') {\n    switch (type) {\n      // possible type values\n      case 'bluetooth':\n      case 'cellular':\n        result = 'cellular';\n        break;\n      case 'none':\n        result = 'none';\n        break;\n      case 'ethernet':\n      case 'wifi':\n      case 'wimax':\n        result = 'wifi';\n        break;\n      case 'other':\n      case 'unknown':\n        result = 'unknown';\n        break;\n      // possible effectiveType values\n      case 'slow-2g':\n      case '2g':\n      case '3g':\n        result = 'cellular';\n        break;\n      case '4g':\n        result = 'wifi';\n        break;\n      default:\n        break;\n    }\n  }\n  return result;\n}\nexport class NetworkWeb extends WebPlugin {\n  constructor() {\n    super();\n    this.handleOnline = () => {\n      const connectionType = translatedConnection();\n      const status = {\n        connected: true,\n        connectionType: connectionType\n      };\n      this.notifyListeners('networkStatusChange', status);\n    };\n    this.handleOffline = () => {\n      const status = {\n        connected: false,\n        connectionType: 'none'\n      };\n      this.notifyListeners('networkStatusChange', status);\n    };\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', this.handleOnline);\n      window.addEventListener('offline', this.handleOffline);\n    }\n  }\n  async getStatus() {\n    if (!window.navigator) {\n      throw this.unavailable('Browser does not support the Network Information API');\n    }\n    const connected = window.navigator.onLine;\n    const connectionType = translatedConnection();\n    const status = {\n      connected,\n      connectionType: connected ? connectionType : 'none'\n    };\n    return status;\n  }\n}\nconst Network = new NetworkWeb();\nexport { Network };","map":{"version":3,"names":["WebPlugin","translatedConnection","connection","window","navigator","mozConnection","webkitConnection","result","type","effectiveType","NetworkWeb","constructor","handleOnline","connectionType","status","connected","notifyListeners","handleOffline","addEventListener","getStatus","unavailable","onLine","Network"],"sources":["/Users/hakankarahan/Desktop/fabrikayazilimi/frontend/node_modules/@capacitor/network/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  ConnectionStatus,\n  ConnectionType,\n  NetworkPlugin,\n} from './definitions';\n\ndeclare global {\n  interface Navigator {\n    connection: any;\n    mozConnection: any;\n    webkitConnection: any;\n  }\n}\n\nfunction translatedConnection(): ConnectionType {\n  const connection =\n    window.navigator.connection ||\n    window.navigator.mozConnection ||\n    window.navigator.webkitConnection;\n  let result: ConnectionType = 'unknown';\n  const type = connection ? connection.type || connection.effectiveType : null;\n  if (type && typeof type === 'string') {\n    switch (type) {\n      // possible type values\n      case 'bluetooth':\n      case 'cellular':\n        result = 'cellular';\n        break;\n      case 'none':\n        result = 'none';\n        break;\n      case 'ethernet':\n      case 'wifi':\n      case 'wimax':\n        result = 'wifi';\n        break;\n      case 'other':\n      case 'unknown':\n        result = 'unknown';\n        break;\n      // possible effectiveType values\n      case 'slow-2g':\n      case '2g':\n      case '3g':\n        result = 'cellular';\n        break;\n      case '4g':\n        result = 'wifi';\n        break;\n      default:\n        break;\n    }\n  }\n  return result;\n}\n\nexport class NetworkWeb extends WebPlugin implements NetworkPlugin {\n  constructor() {\n    super();\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', this.handleOnline);\n      window.addEventListener('offline', this.handleOffline);\n    }\n  }\n\n  async getStatus(): Promise<ConnectionStatus> {\n    if (!window.navigator) {\n      throw this.unavailable(\n        'Browser does not support the Network Information API',\n      );\n    }\n\n    const connected = window.navigator.onLine;\n    const connectionType = translatedConnection();\n\n    const status: ConnectionStatus = {\n      connected,\n      connectionType: connected ? connectionType : 'none',\n    };\n\n    return status;\n  }\n\n  private handleOnline = () => {\n    const connectionType = translatedConnection();\n\n    const status: ConnectionStatus = {\n      connected: true,\n      connectionType: connectionType,\n    };\n\n    this.notifyListeners('networkStatusChange', status);\n  };\n\n  private handleOffline = () => {\n    const status: ConnectionStatus = {\n      connected: false,\n      connectionType: 'none',\n    };\n\n    this.notifyListeners('networkStatusChange', status);\n  };\n}\n\nconst Network = new NetworkWeb();\n\nexport { Network };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAgB3C,SAASC,oBAAoBA,CAAA;EAC3B,MAAMC,UAAU,GACdC,MAAM,CAACC,SAAS,CAACF,UAAU,IAC3BC,MAAM,CAACC,SAAS,CAACC,aAAa,IAC9BF,MAAM,CAACC,SAAS,CAACE,gBAAgB;EACnC,IAAIC,MAAM,GAAmB,SAAS;EACtC,MAAMC,IAAI,GAAGN,UAAU,GAAGA,UAAU,CAACM,IAAI,IAAIN,UAAU,CAACO,aAAa,GAAG,IAAI;EAC5E,IAAID,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IACpC,QAAQA,IAAI;MACV;MACA,KAAK,WAAW;MAChB,KAAK,UAAU;QACbD,MAAM,GAAG,UAAU;QACnB;MACF,KAAK,MAAM;QACTA,MAAM,GAAG,MAAM;QACf;MACF,KAAK,UAAU;MACf,KAAK,MAAM;MACX,KAAK,OAAO;QACVA,MAAM,GAAG,MAAM;QACf;MACF,KAAK,OAAO;MACZ,KAAK,SAAS;QACZA,MAAM,GAAG,SAAS;QAClB;MACF;MACA,KAAK,SAAS;MACd,KAAK,IAAI;MACT,KAAK,IAAI;QACPA,MAAM,GAAG,UAAU;QACnB;MACF,KAAK,IAAI;QACPA,MAAM,GAAG,MAAM;QACf;MACF;QACE;;;EAGN,OAAOA,MAAM;AACf;AAEA,OAAM,MAAOG,UAAW,SAAQV,SAAS;EACvCW,YAAA;IACE,KAAK,EAAE;IAyBD,KAAAC,YAAY,GAAG,MAAK;MAC1B,MAAMC,cAAc,GAAGZ,oBAAoB,EAAE;MAE7C,MAAMa,MAAM,GAAqB;QAC/BC,SAAS,EAAE,IAAI;QACfF,cAAc,EAAEA;OACjB;MAED,IAAI,CAACG,eAAe,CAAC,qBAAqB,EAAEF,MAAM,CAAC;IACrD,CAAC;IAEO,KAAAG,aAAa,GAAG,MAAK;MAC3B,MAAMH,MAAM,GAAqB;QAC/BC,SAAS,EAAE,KAAK;QAChBF,cAAc,EAAE;OACjB;MAED,IAAI,CAACG,eAAe,CAAC,qBAAqB,EAAEF,MAAM,CAAC;IACrD,CAAC;IA1CC,IAAI,OAAOX,MAAM,KAAK,WAAW,EAAE;MACjCA,MAAM,CAACe,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACN,YAAY,CAAC;MACpDT,MAAM,CAACe,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACD,aAAa,CAAC;;EAE1D;EAEA,MAAME,SAASA,CAAA;IACb,IAAI,CAAChB,MAAM,CAACC,SAAS,EAAE;MACrB,MAAM,IAAI,CAACgB,WAAW,CACpB,sDAAsD,CACvD;;IAGH,MAAML,SAAS,GAAGZ,MAAM,CAACC,SAAS,CAACiB,MAAM;IACzC,MAAMR,cAAc,GAAGZ,oBAAoB,EAAE;IAE7C,MAAMa,MAAM,GAAqB;MAC/BC,SAAS;MACTF,cAAc,EAAEE,SAAS,GAAGF,cAAc,GAAG;KAC9C;IAED,OAAOC,MAAM;EACf;;AAuBF,MAAMQ,OAAO,GAAG,IAAIZ,UAAU,EAAE;AAEhC,SAASY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}