{"ast":null,"code":"var _jsxFileName = \"/Users/hakankarahan/Desktop/fabrikayazilimi/frontend/src/contexts/NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\nimport api from '../services/api';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  notifications: [],\n  unreadCount: 0,\n  loading: false,\n  error: null,\n  hasMore: true,\n  page: 1,\n  limit: 20\n};\n\n// Action types\nconst NOTIFICATION_ACTIONS = {\n  FETCH_START: 'FETCH_START',\n  FETCH_SUCCESS: 'FETCH_SUCCESS',\n  FETCH_ERROR: 'FETCH_ERROR',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  MARK_AS_READ: 'MARK_AS_READ',\n  MARK_ALL_AS_READ: 'MARK_ALL_AS_READ',\n  DELETE_NOTIFICATION: 'DELETE_NOTIFICATION',\n  UPDATE_UNREAD_COUNT: 'UPDATE_UNREAD_COUNT',\n  RESET_NOTIFICATIONS: 'RESET_NOTIFICATIONS',\n  LOAD_MORE_SUCCESS: 'LOAD_MORE_SUCCESS'\n};\n\n// Reducer\nconst notificationReducer = (state, action) => {\n  switch (action.type) {\n    case NOTIFICATION_ACTIONS.FETCH_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case NOTIFICATION_ACTIONS.FETCH_SUCCESS:\n      return {\n        ...state,\n        notifications: action.payload.notifications,\n        unreadCount: action.payload.unreadCount,\n        hasMore: action.payload.hasMore,\n        page: action.payload.page,\n        loading: false,\n        error: null\n      };\n    case NOTIFICATION_ACTIONS.LOAD_MORE_SUCCESS:\n      return {\n        ...state,\n        notifications: [...(state.notifications || []), ...(action.payload.notifications || [])],\n        hasMore: action.payload.hasMore,\n        page: action.payload.page,\n        loading: false\n      };\n    case NOTIFICATION_ACTIONS.FETCH_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case NOTIFICATION_ACTIONS.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [action.payload, ...(state.notifications || [])],\n        unreadCount: action.payload.read ? state.unreadCount : state.unreadCount + 1\n      };\n    case NOTIFICATION_ACTIONS.MARK_AS_READ:\n      return {\n        ...state,\n        notifications: (state.notifications || []).map(notification => notification.id === action.payload ? {\n          ...notification,\n          read: true,\n          readAt: new Date().toISOString()\n        } : notification),\n        unreadCount: Math.max(0, state.unreadCount - 1)\n      };\n    case NOTIFICATION_ACTIONS.MARK_ALL_AS_READ:\n      return {\n        ...state,\n        notifications: (state.notifications || []).map(notification => ({\n          ...notification,\n          read: true,\n          readAt: new Date().toISOString()\n        })),\n        unreadCount: 0\n      };\n    case NOTIFICATION_ACTIONS.DELETE_NOTIFICATION:\n      const deletedNotification = (state.notifications || []).find(n => n.id === action.payload);\n      return {\n        ...state,\n        notifications: (state.notifications || []).filter(notification => notification.id !== action.payload),\n        unreadCount: deletedNotification && !deletedNotification.read ? Math.max(0, state.unreadCount - 1) : state.unreadCount\n      };\n    case NOTIFICATION_ACTIONS.UPDATE_UNREAD_COUNT:\n      return {\n        ...state,\n        unreadCount: action.payload\n      };\n    case NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst NotificationContext = /*#__PURE__*/createContext();\n\n// Notification Provider Component\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\n  const fetchTimeoutRef = useRef(null);\n\n  // Güvenlik kontrolü - state.notifications her zaman array olmalı\n  const safeState = {\n    ...state,\n    notifications: state.notifications || [],\n    unreadCount: state.unreadCount || 0,\n    loading: state.loading || false,\n    error: state.error || null,\n    hasMore: state.hasMore || false,\n    page: state.page || 1,\n    limit: state.limit || 20\n  };\n\n  // Fetch notifications with debouncing\n  const fetchNotifications = useCallback(async (page = 1, reset = true) => {\n    if (!isAuthenticated) return;\n\n    // Clear existing timeout\n    if (fetchTimeoutRef.current) {\n      clearTimeout(fetchTimeoutRef.current);\n    }\n\n    // Debounce the API call\n    fetchTimeoutRef.current = setTimeout(async () => {\n      dispatch({\n        type: NOTIFICATION_ACTIONS.FETCH_START\n      });\n      try {\n        const response = await api.get('/notifications', {\n          params: {\n            page,\n            limit: safeState.limit\n          }\n        });\n        const responseData = response.data.data || response.data;\n        const {\n          notifications,\n          pagination\n        } = responseData;\n        const unreadCount = responseData.unreadCount || 0;\n        const hasMore = pagination ? pagination.current < pagination.pages : false;\n        const currentPage = pagination ? pagination.current : page;\n        console.log('Fetched notifications:', notifications.length);\n        console.log('Unread count:', unreadCount);\n        if (reset || page === 1) {\n          dispatch({\n            type: NOTIFICATION_ACTIONS.FETCH_SUCCESS,\n            payload: {\n              notifications,\n              unreadCount,\n              hasMore,\n              page: currentPage\n            }\n          });\n        } else {\n          dispatch({\n            type: NOTIFICATION_ACTIONS.LOAD_MORE_SUCCESS,\n            payload: {\n              notifications,\n              hasMore,\n              page: currentPage\n            }\n          });\n        }\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Fetch notifications error:', error);\n        dispatch({\n          type: NOTIFICATION_ACTIONS.FETCH_ERROR,\n          payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Bildirimler yüklenemedi'\n        });\n      }\n    }, 300); // 300ms debounce\n  }, [isAuthenticated, state.limit]);\n\n  // Load more notifications\n  const loadMore = useCallback(async () => {\n    if (state.loading || !state.hasMore) return;\n    await fetchNotifications(state.page + 1, false);\n  }, [fetchNotifications, state.loading, state.hasMore, state.page]);\n\n  // Mark notification as read\n  const markAsRead = useCallback(async notificationId => {\n    try {\n      await api.put(`/notifications/${notificationId}/read`);\n      dispatch({\n        type: NOTIFICATION_ACTIONS.MARK_AS_READ,\n        payload: notificationId\n      });\n    } catch (error) {\n      console.error('Mark as read error:', error);\n      toast.error('Bildirim okundu olarak işaretlenemedi');\n    }\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(async () => {\n    try {\n      await api.put('/notifications/mark-all-read');\n      dispatch({\n        type: NOTIFICATION_ACTIONS.MARK_ALL_AS_READ\n      });\n      toast.success('Tüm bildirimler okundu olarak işaretlendi');\n    } catch (error) {\n      console.error('Mark all as read error:', error);\n      toast.error('Bildirimler okundu olarak işaretlenemedi');\n    }\n  }, []);\n\n  // Delete notification\n  const deleteNotification = useCallback(async notificationId => {\n    try {\n      await api.delete(`/notifications/${notificationId}`);\n      dispatch({\n        type: NOTIFICATION_ACTIONS.DELETE_NOTIFICATION,\n        payload: notificationId\n      });\n      toast.success('Bildirim silindi');\n    } catch (error) {\n      console.error('Delete notification error:', error);\n      toast.error('Bildirim silinemedi');\n    }\n  }, []);\n\n  // Get unread count\n  const fetchUnreadCount = useCallback(async () => {\n    if (!isAuthenticated) return;\n    try {\n      var _response$data$data;\n      const response = await api.get('/notifications/unread-count');\n      const count = ((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.unreadCount) || response.data.unreadCount || 0;\n      console.log('Unread count response:', response.data);\n      console.log('Parsed unread count:', count);\n      dispatch({\n        type: NOTIFICATION_ACTIONS.UPDATE_UNREAD_COUNT,\n        payload: count\n      });\n    } catch (error) {\n      console.error('Fetch unread count error:', error);\n    }\n  }, [isAuthenticated]);\n\n  // Send notification (admin only)\n  const sendNotification = useCallback(async notificationData => {\n    try {\n      const response = await api.post('/notifications', notificationData);\n      toast.success('Bildirim gönderildi');\n      return {\n        success: true,\n        notification: response.data.notification\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Send notification error:', error);\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Bildirim gönderilemedi';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  }, []);\n\n  // Bulk send notifications (admin only)\n  const sendBulkNotification = useCallback(async notificationData => {\n    try {\n      const response = await api.post('/notifications/bulk', notificationData);\n      toast.success(`${response.data.sentCount} kullanıcıya bildirim gönderildi`);\n      return {\n        success: true,\n        sentCount: response.data.sentCount\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Send bulk notification error:', error);\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Toplu bildirim gönderilemedi';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  }, []);\n\n  // Handle socket notifications\n  useEffect(() => {\n    const handleSocketNotification = event => {\n      const notification = event.detail;\n      dispatch({\n        type: NOTIFICATION_ACTIONS.ADD_NOTIFICATION,\n        payload: notification\n      });\n    };\n    window.addEventListener('socket_notification', handleSocketNotification);\n    return () => {\n      window.removeEventListener('socket_notification', handleSocketNotification);\n    };\n  }, []);\n\n  // Load notifications on auth change\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      console.log('Loading notifications for user:', user.username);\n      fetchNotifications();\n      fetchUnreadCount();\n    } else {\n      dispatch({\n        type: NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS\n      });\n    }\n  }, [isAuthenticated, user]); // fetchNotifications ve fetchUnreadCount dependency'lerini kaldırdık\n\n  // Periodic unread count update\n  useEffect(() => {\n    if (!isAuthenticated) return;\n    const interval = setInterval(() => {\n      fetchUnreadCount();\n    }, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [isAuthenticated]); // fetchUnreadCount dependency'sini kaldırdık\n\n  // Utility functions\n  const getNotificationsByType = useCallback(type => {\n    return safeState.notifications.filter(notification => notification.type === type);\n  }, [safeState.notifications]);\n  const getUnreadNotifications = useCallback(() => {\n    return safeState.notifications.filter(notification => !notification.read);\n  }, [safeState.notifications]);\n  const getNotificationById = useCallback(id => {\n    return safeState.notifications.find(notification => notification.id === id);\n  }, [safeState.notifications]);\n  const hasUnreadNotifications = useCallback(() => {\n    return safeState.unreadCount > 0;\n  }, [safeState.unreadCount]);\n\n  // Format notification time\n  const formatNotificationTime = useCallback(timestamp => {\n    const now = new Date();\n    const notificationTime = new Date(timestamp);\n    const diffInMinutes = Math.floor((now - notificationTime) / (1000 * 60));\n    if (diffInMinutes < 1) return 'Şimdi';\n    if (diffInMinutes < 60) return `${diffInMinutes} dakika önce`;\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours} saat önce`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays} gün önce`;\n    return notificationTime.toLocaleDateString('tr-TR');\n  }, []);\n\n  // Search notifications\n  const searchNotifications = useCallback(query => {\n    try {\n      if (!query) return safeState.notifications;\n      const lowercaseQuery = query.toLowerCase();\n      return safeState.notifications.filter(notification => {\n        var _notification$title, _notification$message, _notification$type;\n        return (notification === null || notification === void 0 ? void 0 : (_notification$title = notification.title) === null || _notification$title === void 0 ? void 0 : _notification$title.toLowerCase().includes(lowercaseQuery)) || (notification === null || notification === void 0 ? void 0 : (_notification$message = notification.message) === null || _notification$message === void 0 ? void 0 : _notification$message.toLowerCase().includes(lowercaseQuery)) || (notification === null || notification === void 0 ? void 0 : (_notification$type = notification.type) === null || _notification$type === void 0 ? void 0 : _notification$type.toLowerCase().includes(lowercaseQuery));\n      });\n    } catch (error) {\n      console.error('Search notifications error:', error);\n      return [];\n    }\n  }, [safeState.notifications]);\n\n  // Get notification icon\n  const getNotificationIcon = useCallback(type => {\n    switch (type) {\n      case 'order_created':\n      case 'order_updated':\n        return '📦';\n      case 'task_assigned':\n      case 'task_completed':\n        return '📋';\n      case 'system_alert':\n        return '⚠️';\n      case 'reminder':\n        return '⏰';\n      case 'message':\n        return '💬';\n      case 'user_action':\n        return '👤';\n      case 'error':\n        return '❌';\n      case 'success':\n        return '✅';\n      case 'info':\n        return 'ℹ️';\n      default:\n        return '📢';\n    }\n  }, []);\n\n  // Get notification color\n  const getNotificationColor = useCallback((type, priority) => {\n    if (priority === 'urgent' || priority === 'high') {\n      return 'bg-red-100 text-red-600';\n    }\n    switch (type) {\n      case 'order_created':\n      case 'order_updated':\n        return 'bg-blue-100 text-blue-600';\n      case 'task_assigned':\n      case 'task_completed':\n        return 'bg-green-100 text-green-600';\n      case 'system_alert':\n        return 'bg-yellow-100 text-yellow-600';\n      case 'error':\n        return 'bg-red-100 text-red-600';\n      case 'success':\n        return 'bg-green-100 text-green-600';\n      default:\n        return 'bg-gray-100 text-gray-600';\n    }\n  }, []);\n\n  // Delete all notifications\n  const deleteAllNotifications = useCallback(async () => {\n    try {\n      await api.delete('/notifications');\n      dispatch({\n        type: NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS\n      });\n      toast.success('Tüm bildirimler silindi');\n    } catch (error) {\n      console.error('Delete all notifications error:', error);\n      toast.error('Bildirimler silinemedi');\n    }\n  }, []);\n  const value = {\n    // State\n    notifications: safeState.notifications,\n    unreadCount: safeState.unreadCount,\n    loading: safeState.loading,\n    isLoading: safeState.loading,\n    // Alias for compatibility\n    error: safeState.error,\n    hasMore: safeState.hasMore,\n    page: safeState.page,\n    // Actions\n    fetchNotifications,\n    loadMore,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    sendNotification,\n    sendBulkNotification,\n    fetchUnreadCount,\n    // Utilities\n    getNotificationsByType,\n    getUnreadNotifications,\n    getNotificationById,\n    hasUnreadNotifications,\n    formatNotificationTime,\n    searchNotifications,\n    getNotificationIcon,\n    getNotificationColor,\n    deleteAllNotifications\n  };\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (fetchTimeoutRef.current) {\n        clearTimeout(fetchTimeoutRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 490,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use notification context\n_s(NotificationProvider, \"JgTHSrIRAPOH1WQ8DPppoFsNUz8=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nexport const useNotification = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s2(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default NotificationContext;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useCallback","useRef","toast","useAuth","api","jsxDEV","_jsxDEV","initialState","notifications","unreadCount","loading","error","hasMore","page","limit","NOTIFICATION_ACTIONS","FETCH_START","FETCH_SUCCESS","FETCH_ERROR","ADD_NOTIFICATION","MARK_AS_READ","MARK_ALL_AS_READ","DELETE_NOTIFICATION","UPDATE_UNREAD_COUNT","RESET_NOTIFICATIONS","LOAD_MORE_SUCCESS","notificationReducer","state","action","type","payload","read","map","notification","id","readAt","Date","toISOString","Math","max","deletedNotification","find","n","filter","NotificationContext","NotificationProvider","children","_s","user","isAuthenticated","dispatch","fetchTimeoutRef","safeState","fetchNotifications","reset","current","clearTimeout","setTimeout","response","get","params","responseData","data","pagination","pages","currentPage","console","log","length","_error$response","_error$response$data","message","loadMore","markAsRead","notificationId","put","markAllAsRead","success","deleteNotification","delete","fetchUnreadCount","_response$data$data","count","sendNotification","notificationData","post","_error$response2","_error$response2$data","errorMessage","sendBulkNotification","sentCount","_error$response3","_error$response3$data","handleSocketNotification","event","detail","window","addEventListener","removeEventListener","username","interval","setInterval","clearInterval","getNotificationsByType","getUnreadNotifications","getNotificationById","hasUnreadNotifications","formatNotificationTime","timestamp","now","notificationTime","diffInMinutes","floor","diffInHours","diffInDays","toLocaleDateString","searchNotifications","query","lowercaseQuery","toLowerCase","_notification$title","_notification$message","_notification$type","title","includes","getNotificationIcon","getNotificationColor","priority","deleteAllNotifications","value","isLoading","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotification","_s2","context","Error","$RefreshReg$"],"sources":["/Users/hakankarahan/Desktop/fabrikayazilimi/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\nimport api from '../services/api';\n\n// Initial state\nconst initialState = {\n  notifications: [],\n  unreadCount: 0,\n  loading: false,\n  error: null,\n  hasMore: true,\n  page: 1,\n  limit: 20,\n};\n\n// Action types\nconst NOTIFICATION_ACTIONS = {\n  FETCH_START: 'FETCH_START',\n  FETCH_SUCCESS: 'FETCH_SUCCESS',\n  FETCH_ERROR: 'FETCH_ERROR',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  MARK_AS_READ: 'MARK_AS_READ',\n  MARK_ALL_AS_READ: 'MARK_ALL_AS_READ',\n  DELETE_NOTIFICATION: 'DELETE_NOTIFICATION',\n  UPDATE_UNREAD_COUNT: 'UPDATE_UNREAD_COUNT',\n  RESET_NOTIFICATIONS: 'RESET_NOTIFICATIONS',\n  LOAD_MORE_SUCCESS: 'LOAD_MORE_SUCCESS',\n};\n\n// Reducer\nconst notificationReducer = (state, action) => {\n  switch (action.type) {\n    case NOTIFICATION_ACTIONS.FETCH_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case NOTIFICATION_ACTIONS.FETCH_SUCCESS:\n      return {\n        ...state,\n        notifications: action.payload.notifications,\n        unreadCount: action.payload.unreadCount,\n        hasMore: action.payload.hasMore,\n        page: action.payload.page,\n        loading: false,\n        error: null,\n      };\n\n    case NOTIFICATION_ACTIONS.LOAD_MORE_SUCCESS:\n      return {\n        ...state,\n        notifications: [...(state.notifications || []), ...(action.payload.notifications || [])],\n        hasMore: action.payload.hasMore,\n        page: action.payload.page,\n        loading: false,\n      };\n\n    case NOTIFICATION_ACTIONS.FETCH_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    case NOTIFICATION_ACTIONS.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [action.payload, ...(state.notifications || [])],\n        unreadCount: action.payload.read ? state.unreadCount : state.unreadCount + 1,\n      };\n\n    case NOTIFICATION_ACTIONS.MARK_AS_READ:\n      return {\n        ...state,\n        notifications: (state.notifications || []).map(notification =>\n          notification.id === action.payload\n            ? { ...notification, read: true, readAt: new Date().toISOString() }\n            : notification\n        ),\n        unreadCount: Math.max(0, state.unreadCount - 1),\n      };\n\n    case NOTIFICATION_ACTIONS.MARK_ALL_AS_READ:\n      return {\n        ...state,\n        notifications: (state.notifications || []).map(notification => ({\n          ...notification,\n          read: true,\n          readAt: new Date().toISOString(),\n        })),\n        unreadCount: 0,\n      };\n\n    case NOTIFICATION_ACTIONS.DELETE_NOTIFICATION:\n      const deletedNotification = (state.notifications || []).find(n => n.id === action.payload);\n      return {\n        ...state,\n        notifications: (state.notifications || []).filter(notification => notification.id !== action.payload),\n        unreadCount: deletedNotification && !deletedNotification.read \n          ? Math.max(0, state.unreadCount - 1) \n          : state.unreadCount,\n      };\n\n    case NOTIFICATION_ACTIONS.UPDATE_UNREAD_COUNT:\n      return {\n        ...state,\n        unreadCount: action.payload,\n      };\n\n    case NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst NotificationContext = createContext();\n\n// Notification Provider Component\nexport const NotificationProvider = ({ children }) => {\n  const { user, isAuthenticated } = useAuth();\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\n  const fetchTimeoutRef = useRef(null);\n\n  // Güvenlik kontrolü - state.notifications her zaman array olmalı\n  const safeState = {\n    ...state,\n    notifications: state.notifications || [],\n    unreadCount: state.unreadCount || 0,\n    loading: state.loading || false,\n    error: state.error || null,\n    hasMore: state.hasMore || false,\n    page: state.page || 1,\n    limit: state.limit || 20\n  };\n\n  // Fetch notifications with debouncing\n  const fetchNotifications = useCallback(async (page = 1, reset = true) => {\n    if (!isAuthenticated) return;\n\n    // Clear existing timeout\n    if (fetchTimeoutRef.current) {\n      clearTimeout(fetchTimeoutRef.current);\n    }\n\n    // Debounce the API call\n    fetchTimeoutRef.current = setTimeout(async () => {\n      dispatch({ type: NOTIFICATION_ACTIONS.FETCH_START });\n\n      try {\n        const response = await api.get('/notifications', {\n          params: {\n            page,\n            limit: safeState.limit,\n          },\n        });\n\n        const responseData = response.data.data || response.data;\n        const { notifications, pagination } = responseData;\n        const unreadCount = responseData.unreadCount || 0;\n        const hasMore = pagination ? pagination.current < pagination.pages : false;\n        const currentPage = pagination ? pagination.current : page;\n        \n        console.log('Fetched notifications:', notifications.length);\n        console.log('Unread count:', unreadCount);\n\n        if (reset || page === 1) {\n          dispatch({\n            type: NOTIFICATION_ACTIONS.FETCH_SUCCESS,\n            payload: {\n              notifications,\n              unreadCount,\n              hasMore,\n              page: currentPage,\n            },\n          });\n        } else {\n          dispatch({\n            type: NOTIFICATION_ACTIONS.LOAD_MORE_SUCCESS,\n            payload: {\n              notifications,\n              hasMore,\n              page: currentPage,\n            },\n          });\n        }\n      } catch (error) {\n        console.error('Fetch notifications error:', error);\n        dispatch({\n          type: NOTIFICATION_ACTIONS.FETCH_ERROR,\n          payload: error.response?.data?.message || 'Bildirimler yüklenemedi',\n        });\n      }\n    }, 300); // 300ms debounce\n  }, [isAuthenticated, state.limit]);\n\n  // Load more notifications\n  const loadMore = useCallback(async () => {\n    if (state.loading || !state.hasMore) return;\n    await fetchNotifications(state.page + 1, false);\n  }, [fetchNotifications, state.loading, state.hasMore, state.page]);\n\n  // Mark notification as read\n  const markAsRead = useCallback(async (notificationId) => {\n    try {\n      await api.put(`/notifications/${notificationId}/read`);\n      dispatch({\n        type: NOTIFICATION_ACTIONS.MARK_AS_READ,\n        payload: notificationId,\n      });\n    } catch (error) {\n      console.error('Mark as read error:', error);\n      toast.error('Bildirim okundu olarak işaretlenemedi');\n    }\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(async () => {\n    try {\n      await api.put('/notifications/mark-all-read');\n      dispatch({ type: NOTIFICATION_ACTIONS.MARK_ALL_AS_READ });\n      toast.success('Tüm bildirimler okundu olarak işaretlendi');\n    } catch (error) {\n      console.error('Mark all as read error:', error);\n      toast.error('Bildirimler okundu olarak işaretlenemedi');\n    }\n  }, []);\n\n  // Delete notification\n  const deleteNotification = useCallback(async (notificationId) => {\n    try {\n      await api.delete(`/notifications/${notificationId}`);\n      dispatch({\n        type: NOTIFICATION_ACTIONS.DELETE_NOTIFICATION,\n        payload: notificationId,\n      });\n      toast.success('Bildirim silindi');\n    } catch (error) {\n      console.error('Delete notification error:', error);\n      toast.error('Bildirim silinemedi');\n    }\n  }, []);\n\n  // Get unread count\n  const fetchUnreadCount = useCallback(async () => {\n    if (!isAuthenticated) return;\n\n    try {\n      const response = await api.get('/notifications/unread-count');\n      const count = response.data.data?.unreadCount || response.data.unreadCount || 0;\n      console.log('Unread count response:', response.data);\n      console.log('Parsed unread count:', count);\n      dispatch({\n        type: NOTIFICATION_ACTIONS.UPDATE_UNREAD_COUNT,\n        payload: count,\n      });\n    } catch (error) {\n      console.error('Fetch unread count error:', error);\n    }\n  }, [isAuthenticated]);\n\n  // Send notification (admin only)\n  const sendNotification = useCallback(async (notificationData) => {\n    try {\n      const response = await api.post('/notifications', notificationData);\n      toast.success('Bildirim gönderildi');\n      return { success: true, notification: response.data.notification };\n    } catch (error) {\n      console.error('Send notification error:', error);\n      const errorMessage = error.response?.data?.message || 'Bildirim gönderilemedi';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  }, []);\n\n  // Bulk send notifications (admin only)\n  const sendBulkNotification = useCallback(async (notificationData) => {\n    try {\n      const response = await api.post('/notifications/bulk', notificationData);\n      toast.success(`${response.data.sentCount} kullanıcıya bildirim gönderildi`);\n      return { success: true, sentCount: response.data.sentCount };\n    } catch (error) {\n      console.error('Send bulk notification error:', error);\n      const errorMessage = error.response?.data?.message || 'Toplu bildirim gönderilemedi';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  }, []);\n\n  // Handle socket notifications\n  useEffect(() => {\n    const handleSocketNotification = (event) => {\n      const notification = event.detail;\n      dispatch({\n        type: NOTIFICATION_ACTIONS.ADD_NOTIFICATION,\n        payload: notification,\n      });\n    };\n\n    window.addEventListener('socket_notification', handleSocketNotification);\n    return () => {\n      window.removeEventListener('socket_notification', handleSocketNotification);\n    };\n  }, []);\n\n  // Load notifications on auth change\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      console.log('Loading notifications for user:', user.username);\n      fetchNotifications();\n      fetchUnreadCount();\n    } else {\n      dispatch({ type: NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS });\n    }\n  }, [isAuthenticated, user]); // fetchNotifications ve fetchUnreadCount dependency'lerini kaldırdık\n\n  // Periodic unread count update\n  useEffect(() => {\n    if (!isAuthenticated) return;\n\n    const interval = setInterval(() => {\n      fetchUnreadCount();\n    }, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [isAuthenticated]); // fetchUnreadCount dependency'sini kaldırdık\n\n  // Utility functions\n  const getNotificationsByType = useCallback((type) => {\n    return safeState.notifications.filter(notification => notification.type === type);\n  }, [safeState.notifications]);\n\n  const getUnreadNotifications = useCallback(() => {\n    return safeState.notifications.filter(notification => !notification.read);\n  }, [safeState.notifications]);\n\n  const getNotificationById = useCallback((id) => {\n    return safeState.notifications.find(notification => notification.id === id);\n  }, [safeState.notifications]);\n\n  const hasUnreadNotifications = useCallback(() => {\n    return safeState.unreadCount > 0;\n  }, [safeState.unreadCount]);\n\n  // Format notification time\n  const formatNotificationTime = useCallback((timestamp) => {\n    const now = new Date();\n    const notificationTime = new Date(timestamp);\n    const diffInMinutes = Math.floor((now - notificationTime) / (1000 * 60));\n\n    if (diffInMinutes < 1) return 'Şimdi';\n    if (diffInMinutes < 60) return `${diffInMinutes} dakika önce`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours} saat önce`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays} gün önce`;\n    \n    return notificationTime.toLocaleDateString('tr-TR');\n  }, []);\n\n  // Search notifications\n  const searchNotifications = useCallback((query) => {\n    try {\n      if (!query) return safeState.notifications;\n      const lowercaseQuery = query.toLowerCase();\n      return safeState.notifications.filter(notification => \n        notification?.title?.toLowerCase().includes(lowercaseQuery) ||\n        notification?.message?.toLowerCase().includes(lowercaseQuery) ||\n        notification?.type?.toLowerCase().includes(lowercaseQuery)\n      );\n    } catch (error) {\n      console.error('Search notifications error:', error);\n      return [];\n    }\n  }, [safeState.notifications]);\n\n  // Get notification icon\n  const getNotificationIcon = useCallback((type) => {\n    switch (type) {\n      case 'order_created':\n      case 'order_updated':\n        return '📦';\n      case 'task_assigned':\n      case 'task_completed':\n        return '📋';\n      case 'system_alert':\n        return '⚠️';\n      case 'reminder':\n        return '⏰';\n      case 'message':\n        return '💬';\n      case 'user_action':\n        return '👤';\n      case 'error':\n        return '❌';\n      case 'success':\n        return '✅';\n      case 'info':\n        return 'ℹ️';\n      default:\n        return '📢';\n    }\n  }, []);\n\n  // Get notification color\n  const getNotificationColor = useCallback((type, priority) => {\n    if (priority === 'urgent' || priority === 'high') {\n      return 'bg-red-100 text-red-600';\n    }\n    \n    switch (type) {\n      case 'order_created':\n      case 'order_updated':\n        return 'bg-blue-100 text-blue-600';\n      case 'task_assigned':\n      case 'task_completed':\n        return 'bg-green-100 text-green-600';\n      case 'system_alert':\n        return 'bg-yellow-100 text-yellow-600';\n      case 'error':\n        return 'bg-red-100 text-red-600';\n      case 'success':\n        return 'bg-green-100 text-green-600';\n      default:\n        return 'bg-gray-100 text-gray-600';\n    }\n  }, []);\n\n  // Delete all notifications\n  const deleteAllNotifications = useCallback(async () => {\n    try {\n      await api.delete('/notifications');\n      dispatch({ type: NOTIFICATION_ACTIONS.RESET_NOTIFICATIONS });\n      toast.success('Tüm bildirimler silindi');\n    } catch (error) {\n      console.error('Delete all notifications error:', error);\n      toast.error('Bildirimler silinemedi');\n    }\n  }, []);\n\n  const value = {\n    // State\n    notifications: safeState.notifications,\n    unreadCount: safeState.unreadCount,\n    loading: safeState.loading,\n    isLoading: safeState.loading, // Alias for compatibility\n    error: safeState.error,\n    hasMore: safeState.hasMore,\n    page: safeState.page,\n\n    // Actions\n    fetchNotifications,\n    loadMore,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    sendNotification,\n    sendBulkNotification,\n    fetchUnreadCount,\n\n    // Utilities\n    getNotificationsByType,\n    getUnreadNotifications,\n    getNotificationById,\n    hasUnreadNotifications,\n    formatNotificationTime,\n    searchNotifications,\n    getNotificationIcon,\n    getNotificationColor,\n    deleteAllNotifications,\n  };\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (fetchTimeoutRef.current) {\n        clearTimeout(fetchTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\n// Custom hook to use notification context\nexport const useNotification = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport default NotificationContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}