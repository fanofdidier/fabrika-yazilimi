{"ast":null,"code":"// Network utilities for mobile app\nexport const getBackendUrl=async()=>{// Check if running in Capacitor (mobile app)\nif(window.Capacitor){try{// Try to get device IP address\nconst{Network}=await import('@capacitor/network');const status=await Network.getStatus();if(status.connected&&status.connectionType==='wifi'){// If connected to WiFi, try to detect the network\n// For now, use the configured IP\nreturn process.env.REACT_APP_API_URL||'http://192.168.1.101:5001/api';}}catch(error){console.log('Network detection failed, using fallback URL');}// Fallback to configured URL\nreturn process.env.REACT_APP_API_URL||'http://192.168.1.101:5001/api';}// For web browser, use localhost\nreturn process.env.REACT_APP_API_URL||'http://localhost:5001/api';};export const getSocketUrl=async()=>{// Check if running in Capacitor (mobile app)\nif(window.Capacitor){try{// Try to get device IP address\nconst{Network}=await import('@capacitor/network');const status=await Network.getStatus();if(status.connected&&status.connectionType==='wifi'){// If connected to WiFi, try to detect the network\n// For now, use the configured IP\nreturn process.env.REACT_APP_SOCKET_URL||'http://192.168.1.101:5001';}}catch(error){console.log('Network detection failed, using fallback URL');}// Fallback to configured URL\nreturn process.env.REACT_APP_SOCKET_URL||'http://192.168.1.101:5001';}// For web browser, use localhost\nreturn process.env.REACT_APP_SOCKET_URL||'http://localhost:5001';};// Test connection to backend\nexport const testBackendConnection=async url=>{try{const response=await fetch(\"\".concat(url,\"/health\"),{method:'GET',timeout:5000});return response.ok;}catch(error){console.log('Backend connection test failed:',error);return false;}};// Auto-detect backend URL\nexport const autoDetectBackendUrl=async()=>{const possibleUrls=['http://192.168.1.101:5001/api','http://10.0.2.2:5001/api',// Android emulator\n'http://localhost:5001/api','http://127.0.0.1:5001/api'];for(const url of possibleUrls){console.log(\"Testing backend URL: \".concat(url));const isConnected=await testBackendConnection(url);if(isConnected){console.log(\"\\u2705 Backend found at: \".concat(url));return url;}}console.log('❌ No backend found, using fallback');return possibleUrls[0];// Return first URL as fallback\n};","map":{"version":3,"names":["getBackendUrl","window","Capacitor","Network","status","getStatus","connected","connectionType","process","env","REACT_APP_API_URL","error","console","log","getSocketUrl","REACT_APP_SOCKET_URL","testBackendConnection","url","response","fetch","concat","method","timeout","ok","autoDetectBackendUrl","possibleUrls","isConnected"],"sources":["/Users/hakankarahan/Desktop/fabrikayazilimi/frontend/src/utils/networkUtils.js"],"sourcesContent":["// Network utilities for mobile app\nexport const getBackendUrl = async () => {\n  // Check if running in Capacitor (mobile app)\n  if (window.Capacitor) {\n    try {\n      // Try to get device IP address\n      const { Network } = await import('@capacitor/network');\n      const status = await Network.getStatus();\n      \n      if (status.connected && status.connectionType === 'wifi') {\n        // If connected to WiFi, try to detect the network\n        // For now, use the configured IP\n        return process.env.REACT_APP_API_URL || 'http://192.168.1.101:5001/api';\n      }\n    } catch (error) {\n      console.log('Network detection failed, using fallback URL');\n    }\n    \n    // Fallback to configured URL\n    return process.env.REACT_APP_API_URL || 'http://192.168.1.101:5001/api';\n  }\n  \n  // For web browser, use localhost\n  return process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n};\n\nexport const getSocketUrl = async () => {\n  // Check if running in Capacitor (mobile app)\n  if (window.Capacitor) {\n    try {\n      // Try to get device IP address\n      const { Network } = await import('@capacitor/network');\n      const status = await Network.getStatus();\n      \n      if (status.connected && status.connectionType === 'wifi') {\n        // If connected to WiFi, try to detect the network\n        // For now, use the configured IP\n        return process.env.REACT_APP_SOCKET_URL || 'http://192.168.1.101:5001';\n      }\n    } catch (error) {\n      console.log('Network detection failed, using fallback URL');\n    }\n    \n    // Fallback to configured URL\n    return process.env.REACT_APP_SOCKET_URL || 'http://192.168.1.101:5001';\n  }\n  \n  // For web browser, use localhost\n  return process.env.REACT_APP_SOCKET_URL || 'http://localhost:5001';\n};\n\n// Test connection to backend\nexport const testBackendConnection = async (url) => {\n  try {\n    const response = await fetch(`${url}/health`, {\n      method: 'GET',\n      timeout: 5000\n    });\n    return response.ok;\n  } catch (error) {\n    console.log('Backend connection test failed:', error);\n    return false;\n  }\n};\n\n// Auto-detect backend URL\nexport const autoDetectBackendUrl = async () => {\n  const possibleUrls = [\n    'http://192.168.1.101:5001/api',\n    'http://10.0.2.2:5001/api', // Android emulator\n    'http://localhost:5001/api',\n    'http://127.0.0.1:5001/api'\n  ];\n  \n  for (const url of possibleUrls) {\n    console.log(`Testing backend URL: ${url}`);\n    const isConnected = await testBackendConnection(url);\n    if (isConnected) {\n      console.log(`✅ Backend found at: ${url}`);\n      return url;\n    }\n  }\n  \n  console.log('❌ No backend found, using fallback');\n  return possibleUrls[0]; // Return first URL as fallback\n};\n"],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,aAAa,CAAG,KAAAA,CAAA,GAAY,CACvC;AACA,GAAIC,MAAM,CAACC,SAAS,CAAE,CACpB,GAAI,CACF;AACA,KAAM,CAAEC,OAAQ,CAAC,CAAG,KAAM,OAAM,CAAC,oBAAoB,CAAC,CACtD,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAD,OAAO,CAACE,SAAS,CAAC,CAAC,CAExC,GAAID,MAAM,CAACE,SAAS,EAAIF,MAAM,CAACG,cAAc,GAAK,MAAM,CAAE,CACxD;AACA;AACA,MAAO,CAAAC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,+BAA+B,CACzE,CACF,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAC7D,CAEA;AACA,MAAO,CAAAL,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,+BAA+B,CACzE,CAEA;AACA,MAAO,CAAAF,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,2BAA2B,CACrE,CAAC,CAED,MAAO,MAAM,CAAAI,YAAY,CAAG,KAAAA,CAAA,GAAY,CACtC;AACA,GAAIb,MAAM,CAACC,SAAS,CAAE,CACpB,GAAI,CACF;AACA,KAAM,CAAEC,OAAQ,CAAC,CAAG,KAAM,OAAM,CAAC,oBAAoB,CAAC,CACtD,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAD,OAAO,CAACE,SAAS,CAAC,CAAC,CAExC,GAAID,MAAM,CAACE,SAAS,EAAIF,MAAM,CAACG,cAAc,GAAK,MAAM,CAAE,CACxD;AACA;AACA,MAAO,CAAAC,OAAO,CAACC,GAAG,CAACM,oBAAoB,EAAI,2BAA2B,CACxE,CACF,CAAE,MAAOJ,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAC7D,CAEA;AACA,MAAO,CAAAL,OAAO,CAACC,GAAG,CAACM,oBAAoB,EAAI,2BAA2B,CACxE,CAEA;AACA,MAAO,CAAAP,OAAO,CAACC,GAAG,CAACM,oBAAoB,EAAI,uBAAuB,CACpE,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,qBAAqB,CAAG,KAAO,CAAAC,GAAG,EAAK,CAClD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIH,GAAG,YAAW,CAC5CI,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,IACX,CAAC,CAAC,CACF,MAAO,CAAAJ,QAAQ,CAACK,EAAE,CACpB,CAAE,MAAOZ,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAEF,KAAK,CAAC,CACrD,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAa,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CAC9C,KAAM,CAAAC,YAAY,CAAG,CACnB,+BAA+B,CAC/B,0BAA0B,CAAE;AAC5B,2BAA2B,CAC3B,2BAA2B,CAC5B,CAED,IAAK,KAAM,CAAAR,GAAG,GAAI,CAAAQ,YAAY,CAAE,CAC9Bb,OAAO,CAACC,GAAG,yBAAAO,MAAA,CAAyBH,GAAG,CAAE,CAAC,CAC1C,KAAM,CAAAS,WAAW,CAAG,KAAM,CAAAV,qBAAqB,CAACC,GAAG,CAAC,CACpD,GAAIS,WAAW,CAAE,CACfd,OAAO,CAACC,GAAG,6BAAAO,MAAA,CAAwBH,GAAG,CAAE,CAAC,CACzC,MAAO,CAAAA,GAAG,CACZ,CACF,CAEAL,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACjD,MAAO,CAAAY,YAAY,CAAC,CAAC,CAAC,CAAE;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}