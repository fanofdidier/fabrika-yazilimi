{"version":3,"file":"static/js/919.e798a64e.chunk.js","mappings":"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","sources":["pages/Tasks/TasksPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Button, Badge, Table, LoadingSpinner, Input } from '../../components/UI';\n\n\nconst TasksPage = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [priorityFilter, setPriorityFilter] = useState('all');\n\n  // Siparişlerden otomatik görev oluşturma\n  const generateTasksFromOrders = (orders) => {\n    const tasks = [];\n    \n    orders.forEach((order, index) => {\n      // Her sipariş için temel görevler oluştur\n      const baseTaskId = (index + 1) * 100;\n      \n      // Malzeme Hazırlığı görevi\n      tasks.push({\n        id: baseTaskId + 1,\n        title: 'Malzeme Hazırlığı',\n        description: `${order.orderNumber} siparişi için ${order.productName} malzeme hazırlığı`,\n        assignee: 'Beklemede',\n        assigneeEmail: 'atama@fabrika.com',\n        status: order.status === 'completed' ? 'completed' : 'pending',\n        priority: order.priority || 'medium',\n        category: 'material',\n        createdDate: order.createdAt,\n        dueDate: order.deliveryDate,\n        completedDate: order.status === 'completed' ? order.deliveryDate : null,\n        orderId: order.id,\n        orderNumber: order.orderNumber,\n        estimatedHours: Math.ceil(order.quantity / 10) || 4,\n        actualHours: null,\n        progress: order.status === 'completed' ? 100 : 0\n      });\n      \n      // Üretim görevi\n      tasks.push({\n        id: baseTaskId + 2,\n        title: 'Üretim İşlemi',\n        description: `${order.orderNumber} - ${order.productName} üretim işlemi`,\n        assignee: 'Beklemede',\n        assigneeEmail: 'uretim@fabrika.com',\n        status: order.status === 'completed' ? 'completed' : (order.status === 'in_progress' ? 'in_progress' : 'pending'),\n        priority: order.priority || 'high',\n        category: 'production',\n        createdDate: order.createdAt,\n        dueDate: order.deliveryDate,\n        completedDate: order.status === 'completed' ? order.deliveryDate : null,\n        orderId: order.id,\n        orderNumber: order.orderNumber,\n        estimatedHours: Math.ceil(order.quantity / 5) || 8,\n        actualHours: null,\n        progress: order.status === 'completed' ? 100 : (order.status === 'in_progress' ? 50 : 0)\n      });\n      \n      // Kalite Kontrol görevi\n      tasks.push({\n        id: baseTaskId + 3,\n        title: 'Kalite Kontrol',\n        description: `${order.orderNumber} siparişi için kalite kontrol işlemi`,\n        assignee: 'Beklemede',\n        assigneeEmail: 'kalite@fabrika.com',\n        status: order.status === 'completed' ? 'completed' : 'pending',\n        priority: 'high',\n        category: 'quality',\n        createdDate: order.createdAt,\n        dueDate: order.deliveryDate,\n        completedDate: order.status === 'completed' ? order.deliveryDate : null,\n        orderId: order.id,\n        orderNumber: order.orderNumber,\n        estimatedHours: 2,\n        actualHours: null,\n        progress: order.status === 'completed' ? 100 : 0\n      });\n    });\n    \n    return tasks;\n  };\n\n  useEffect(() => {\n    const loadTasks = async () => {\n      setLoading(true);\n      try {\n        // localStorage'dan siparişleri yükle\n        const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n        \n        // Siparişlerden görevler oluştur\n        const generatedTasks = generateTasksFromOrders(savedOrders);\n        \n        await new Promise(resolve => setTimeout(resolve, 500));\n        setTasks(generatedTasks);\n      } catch (error) {\n        console.error('Tasks loading error:', error);\n        setTasks([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadTasks();\n  }, []);\n\n  const getStatusBadge = (status) => {\n    const statusConfig = {\n      pending: { variant: 'warning', text: 'Beklemede' },\n      in_progress: { variant: 'primary', text: 'İşlemde' },\n      completed: { variant: 'success', text: 'Tamamlandı' },\n      overdue: { variant: 'danger', text: 'Gecikmiş' },\n      cancelled: { variant: 'secondary', text: 'İptal Edildi' }\n    };\n    \n    const config = statusConfig[status] || { variant: 'secondary', text: status };\n    return <Badge variant={config.variant}>{config.text}</Badge>;\n  };\n\n  const getPriorityBadge = (priority) => {\n    const priorityConfig = {\n      high: { variant: 'danger', text: 'Yüksek' },\n      medium: { variant: 'warning', text: 'Orta' },\n      low: { variant: 'success', text: 'Düşük' }\n    };\n    \n    const config = priorityConfig[priority] || { variant: 'secondary', text: priority };\n    return <Badge variant={config.variant} size=\"sm\">{config.text}</Badge>;\n  };\n\n  const getCategoryBadge = (category) => {\n    const categoryConfig = {\n      material: { variant: 'primary', text: 'Malzeme', icon: '📦' },\n      quality: { variant: 'success', text: 'Kalite', icon: '✅' },\n      planning: { variant: 'warning', text: 'Planlama', icon: '📋' },\n      maintenance: { variant: 'secondary', text: 'Bakım', icon: '🔧' },\n      shipping: { variant: 'primary', text: 'Sevkiyat', icon: '🚚' },\n      production: { variant: 'primary', text: 'Üretim', icon: '⚙️' }\n    };\n    \n    const config = categoryConfig[category] || { variant: 'secondary', text: category, icon: '📝' };\n    return (\n      <Badge variant={config.variant} size=\"sm\">\n        {config.icon} {config.text}\n      </Badge>\n    );\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('tr-TR');\n  };\n\n  const formatDateTime = (dateString) => {\n    return new Date(dateString).toLocaleString('tr-TR');\n  };\n\n  const isOverdue = (dueDate, status) => {\n    if (status === 'completed') return false;\n    return new Date(dueDate) < new Date();\n  };\n\n  const filteredTasks = tasks.filter(task => {\n    if (!task) return false;\n    const matchesSearch = \n      task.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      task.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      task.assignee?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (task.orderNumber && task.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesStatus = statusFilter === 'all' || task.status === statusFilter;\n    const matchesPriority = priorityFilter === 'all' || task.priority === priorityFilter;\n    \n    return matchesSearch && matchesStatus && matchesPriority;\n  });\n\n  const columns = [\n    {\n      key: 'title',\n      header: 'Görev',\n      render: (task) => (\n        <div>\n          <Link \n            to={`/tasks/${task?.id || ''}`}\n            className=\"text-blue-600 hover:text-blue-800 font-medium\"\n          >\n            {task?.title || 'Başlıksız Görev'}\n          </Link>\n          <div className=\"text-sm text-gray-500 mt-1\">\n            {task?.description && task.description.length > 50 \n              ? `${task.description.substring(0, 50)}...` \n              : task?.description || 'Açıklama yok'\n            }\n          </div>\n          {task?.orderNumber && (\n            <div className=\"text-xs text-blue-600 mt-1\">\n              Sipariş: {task.orderNumber}\n            </div>\n          )}\n        </div>\n      )\n    },\n    {\n      key: 'assignee',\n      header: 'Atanan',\n      render: (task) => (\n        <div>\n          <div className=\"font-medium text-gray-900\">{task?.assignee || 'Atanmamış'}</div>\n          <div className=\"text-sm text-gray-500\">{task?.assigneeEmail || '-'}</div>\n        </div>\n      )\n    },\n    {\n      key: 'category',\n      header: 'Kategori',\n      render: (task) => getCategoryBadge(task?.category || 'other')\n    },\n    {\n      key: 'status',\n      header: 'Durum',\n      render: (task) => (\n        <div className=\"space-y-1\">\n          {getStatusBadge(isOverdue(task?.dueDate, task?.status) ? 'overdue' : (task?.status || 'pending'))}\n          {getPriorityBadge(task?.priority || 'medium')}\n        </div>\n      )\n    },\n    {\n      key: 'progress',\n      header: 'İlerleme',\n      render: (task) => (\n        <div className=\"w-full\">\n          <div className=\"flex justify-between text-sm mb-1\">\n            <span>{task?.progress || 0}%</span>\n            <span className=\"text-gray-500\">\n              {task?.actualHours ? `${task.actualHours}h` : `${task?.estimatedHours || 0}h`}\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className={`h-2 rounded-full ${\n                (task?.progress || 0) === 100 ? 'bg-green-500' :\n                (task?.progress || 0) > 50 ? 'bg-blue-500' :\n                (task?.progress || 0) > 0 ? 'bg-yellow-500' : 'bg-gray-300'\n              }`}\n              style={{ width: `${task?.progress || 0}%` }}\n            ></div>\n          </div>\n        </div>\n      )\n    },\n    {\n      key: 'dates',\n      header: 'Tarihler',\n      render: (task) => (\n        <div className=\"text-sm\">\n          <div>Oluşturulma: {formatDate(task?.createdDate) || '-'}</div>\n          <div className={`${\n            isOverdue(task?.dueDate, task?.status) ? 'text-red-600 font-medium' : 'text-gray-500'\n          }`}>\n            Bitiş: {formatDate(task?.dueDate) || '-'}\n          </div>\n          {task?.completedDate && (\n            <div className=\"text-green-600\">\n              Tamamlanma: {formatDate(task.completedDate)}\n            </div>\n          )}\n        </div>\n      )\n    },\n    {\n      key: 'actions',\n      header: 'İşlemler',\n      render: (task) => (\n        <div className=\"flex space-x-2\">\n          <Link to={`/tasks/${task?.id || ''}`}>\n            <Button size=\"sm\" variant=\"outline\">\n              Görüntüle\n            </Button>\n          </Link>\n          {task?.status === 'pending' && (\n            <Button \n              size=\"sm\" \n              variant=\"primary\"\n              onClick={() => handleStatusChange(task?.id, 'in_progress')}\n            >\n              Başlat\n            </Button>\n          )}\n          {task?.status === 'in_progress' && (\n            <Button \n              size=\"sm\" \n              variant=\"success\"\n              onClick={() => handleStatusChange(task?.id, 'completed')}\n            >\n              Tamamla\n            </Button>\n          )}\n        </div>\n      )\n    }\n  ];\n\n  const handleStatusChange = async (taskId, newStatus) => {\n    try {\n      const updatedTasks = tasks.map(task => {\n        if (task.id === taskId) {\n          const updatedTask = { ...task, status: newStatus };\n          if (newStatus === 'completed') {\n            updatedTask.completedDate = new Date().toISOString();\n            updatedTask.progress = 100;\n          } else if (newStatus === 'in_progress') {\n            updatedTask.progress = Math.max(updatedTask.progress, 10);\n          }\n          return updatedTask;\n        }\n        return task;\n      });\n      setTasks(updatedTasks);\n    } catch (error) {\n      console.error('Status update error:', error);\n    }\n  };\n\n  const statusOptions = [\n    { value: 'all', label: 'Tüm Durumlar' },\n    { value: 'pending', label: 'Beklemede' },\n    { value: 'in_progress', label: 'İşlemde' },\n    { value: 'completed', label: 'Tamamlandı' },\n    { value: 'overdue', label: 'Gecikmiş' }\n  ];\n\n  const priorityOptions = [\n    { value: 'all', label: 'Tüm Öncelikler' },\n    { value: 'high', label: 'Yüksek' },\n    { value: 'medium', label: 'Orta' },\n    { value: 'low', label: 'Düşük' }\n  ];\n\n  const getStatusCounts = () => {\n    return tasks.reduce((acc, task) => {\n      const status = isOverdue(task.dueDate, task.status) ? 'overdue' : task.status;\n      acc[status] = (acc[status] || 0) + 1;\n      return acc;\n    }, {});\n  };\n\n  const statusCounts = getStatusCounts();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <LoadingSpinner size=\"lg\" text=\"Görevler yükleniyor...\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Görev Yönetimi</h1>\n            <p className=\"text-gray-600 mt-2\">\n              Toplam {tasks.length} görev bulundu\n            </p>\n          </div>\n          <Link to=\"/tasks/create\">\n            <Button variant=\"primary\">\n              📋 Yeni Görev Oluştur\n            </Button>\n          </Link>\n        </div>\n\n        {/* Status Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <Card className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-yellow-100 rounded-lg mr-3\">\n                <span className=\"text-yellow-600 text-xl\">⏳</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Beklemede</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{statusCounts.pending || 0}</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg mr-3\">\n                <span className=\"text-blue-600 text-xl\">🔄</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">İşlemde</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{statusCounts.in_progress || 0}</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg mr-3\">\n                <span className=\"text-green-600 text-xl\">✅</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Tamamlandı</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{statusCounts.completed || 0}</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-red-100 rounded-lg mr-3\">\n                <span className=\"text-red-600 text-xl\">⚠️</span>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Gecikmiş</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{statusCounts.overdue || 0}</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"p-6 mb-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Arama\n              </label>\n              <Input\n                type=\"text\"\n                placeholder=\"Görev adı, açıklama, atanan kişi ara...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Durum Filtresi\n              </label>\n              <select\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                value={statusFilter}\n                onChange={(e) => setStatusFilter(e.target.value)}\n              >\n                {statusOptions.map(option => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Öncelik Filtresi\n              </label>\n              <select\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                value={priorityFilter}\n                onChange={(e) => setPriorityFilter(e.target.value)}\n              >\n                {priorityOptions.map(option => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </Card>\n\n        {/* Tasks Table */}\n        <Card>\n          <Table\n            data={filteredTasks}\n            columns={columns}\n            loading={loading}\n            emptyMessage=\"Görev bulunamadı\"\n          />\n        </Card>\n    </div>\n  );\n};\n\nexport default TasksPage;"],"names":["TasksPage","tasks","setTasks","useState","loading","setLoading","searchTerm","setSearchTerm","statusFilter","setStatusFilter","priorityFilter","setPriorityFilter","useEffect","async","generatedTasks","orders","forEach","order","index","baseTaskId","push","id","title","description","concat","orderNumber","productName","assignee","assigneeEmail","status","priority","category","createdDate","createdAt","dueDate","deliveryDate","completedDate","orderId","estimatedHours","Math","ceil","quantity","actualHours","progress","generateTasksFromOrders","JSON","parse","localStorage","getItem","Promise","resolve","setTimeout","error","console","loadTasks","getStatusBadge","config","pending","variant","text","in_progress","completed","overdue","cancelled","_jsx","Badge","children","getPriorityBadge","high","medium","low","size","formatDate","dateString","Date","toLocaleDateString","isOverdue","filteredTasks","filter","task","_task$title","_task$description","_task$assignee","matchesSearch","toLowerCase","includes","matchesStatus","matchesPriority","columns","key","header","render","_jsxs","Link","to","className","length","substring","material","icon","quality","planning","maintenance","shipping","production","getCategoryBadge","style","width","Button","onClick","handleStatusChange","taskId","newStatus","updatedTasks","map","updatedTask","_objectSpread","toISOString","max","statusCounts","reduce","acc","LoadingSpinner","Card","Input","type","placeholder","value","onChange","e","target","label","option","Table","data","emptyMessage"],"sourceRoot":""}