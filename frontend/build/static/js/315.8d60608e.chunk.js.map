{"version":3,"file":"static/js/315.8d60608e.chunk.js","mappings":"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","sources":["pages/Notifications/NotificationsPage.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { useNotification } from '../../contexts/NotificationContext';\nimport { Card, Button, Badge, Alert } from '../../components/UI';\n\n\nconst NotificationsPage = () => {\n  const { notifications, markAsRead, markAllAsRead, clearNotification, clearAllNotifications } = useNotification();\n  const [filter, setFilter] = useState('all'); // all, unread, read\n\n  // Filter notifications based on selected filter\n  const filteredNotifications = notifications.filter(notification => {\n    if (filter === 'unread') return !notification.read;\n    if (filter === 'read') return notification.read;\n    return true;\n  });\n\n  // Get notification icon based on type\n  const getNotificationIcon = (type) => {\n    const icons = {\n      info: 'üì¢',\n      success: '‚úÖ',\n      warning: '‚ö†Ô∏è',\n      error: '‚ùå',\n      order: 'üì¶',\n      task: 'üìã',\n      system: '‚öôÔ∏è'\n    };\n    return icons[type] || 'üì¢';\n  };\n\n  // Get notification color based on type\n  const getNotificationColor = (type) => {\n    const colors = {\n      info: 'bg-blue-50 border-blue-200',\n      success: 'bg-green-50 border-green-200',\n      warning: 'bg-yellow-50 border-yellow-200',\n      error: 'bg-red-50 border-red-200',\n      order: 'bg-purple-50 border-purple-200',\n      task: 'bg-indigo-50 border-indigo-200',\n      system: 'bg-gray-50 border-gray-200'\n    };\n    return colors[type] || 'bg-blue-50 border-blue-200';\n  };\n\n  // Format time\n  const formatTime = (timestamp) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffInMinutes = Math.floor((now - time) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Az √∂nce';\n    if (diffInMinutes < 60) return `${diffInMinutes} dakika √∂nce`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} saat √∂nce`;\n    return `${Math.floor(diffInMinutes / 1440)} g√ºn √∂nce`;\n  };\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Bildirimler</h1>\n              <p className=\"text-gray-600 mt-1\">\n                {unreadCount > 0 ? `${unreadCount} okunmamƒ±≈ü bildirim` : 'T√ºm bildirimler okundu'}\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              {unreadCount > 0 && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={markAllAsRead}\n                >\n                  T√ºm√ºn√º Okundu ƒ∞≈üaretle\n                </Button>\n              )}\n              {notifications.length > 0 && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={clearAllNotifications}\n                  className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                >\n                  T√ºm√ºn√º Temizle\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Filter Buttons */}\n          <div className=\"flex gap-2\">\n            <Button\n              variant={filter === 'all' ? 'primary' : 'outline'}\n              size=\"sm\"\n              onClick={() => setFilter('all')}\n            >\n              T√ºm√º ({notifications.length})\n            </Button>\n            <Button\n              variant={filter === 'unread' ? 'primary' : 'outline'}\n              size=\"sm\"\n              onClick={() => setFilter('unread')}\n            >\n              Okunmamƒ±≈ü ({unreadCount})\n            </Button>\n            <Button\n              variant={filter === 'read' ? 'primary' : 'outline'}\n              size=\"sm\"\n              onClick={() => setFilter('read')}\n            >\n              Okunmu≈ü ({notifications.length - unreadCount})\n            </Button>\n          </div>\n        </div>\n\n        {/* Notifications List */}\n        <div className=\"space-y-3\">\n          {filteredNotifications.length === 0 ? (\n            <Card className=\"p-8 text-center\">\n              <div className=\"text-gray-400 text-lg mb-2\">üì≠</div>\n              <p className=\"text-gray-600\">\n                {filter === 'all' ? 'Hen√ºz bildirim yok' : \n                 filter === 'unread' ? 'Okunmamƒ±≈ü bildirim yok' : 'Okunmu≈ü bildirim yok'}\n              </p>\n            </Card>\n          ) : (\n            filteredNotifications.map((notification) => (\n              <Card\n                key={notification.id}\n                className={`p-4 transition-all duration-200 hover:shadow-md ${\n                  !notification.read ? 'ring-2 ring-blue-200' : ''\n                } ${getNotificationColor(notification.type)}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-3 flex-1\">\n                    <div className=\"text-2xl\">\n                      {getNotificationIcon(notification.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h3 className=\"font-medium text-gray-900 truncate\">\n                          {notification.title}\n                        </h3>\n                        {!notification.read && (\n                          <Badge variant=\"primary\" size=\"sm\">\n                            Yeni\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-gray-600 text-sm mb-2\">\n                        {notification.message}\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span>{formatTime(notification.timestamp)}</span>\n                        <Badge variant=\"secondary\" size=\"sm\">\n                          {notification.type}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2 ml-4\">\n                    {!notification.read && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => markAsRead(notification.id)}\n                        className=\"text-blue-600 hover:bg-blue-50\"\n                      >\n                        Okundu ƒ∞≈üaretle\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => clearNotification(notification.id)}\n                      className=\"text-red-600 hover:bg-red-50\"\n                    >\n                      Sil\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n    </div>\n  );\n};\n\nexport default NotificationsPage;"],"names":["NotificationsPage","notifications","markAsRead","markAllAsRead","clearNotification","clearAllNotifications","useNotification","filter","setFilter","useState","filteredNotifications","notification","read","getNotificationIcon","type","info","success","warning","error","order","task","system","formatTime","timestamp","now","Date","time","diffInMinutes","Math","floor","concat","unreadCount","n","length","_jsxs","className","children","_jsx","Button","variant","size","onClick","Card","map","title","Badge","message","id"],"sourceRoot":""}