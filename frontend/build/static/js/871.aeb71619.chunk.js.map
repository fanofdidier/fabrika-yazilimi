{"version":3,"file":"static/js/871.aeb71619.chunk.js","mappings":"yMAIA,MA2KA,EA3KoBA,KAClB,MAAM,KAAEC,IAASC,EAAAA,EAAAA,OACVC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAgBC,IAAqBJ,EAAAA,EAAAA,UAAS,UAErDK,EAAAA,EAAAA,WAAU,KACRC,KACC,CAACH,IAEJ,MAAMG,EAAeC,UACnBR,GAAW,GACX,IAEES,WAAW,KACTN,EAAW,CACT,CACEO,GAAI,EACJC,MAAO,oCACPC,KAAM,QACNC,OAAQ,YACRC,OAAQ,YACRC,UAAW,cAEb,CACEL,GAAI,EACJC,MAAO,6BACPC,KAAM,QACNC,OAAQ,YACRC,OAAQ,UACRC,UAAW,gBAGff,GAAW,IACV,IACL,CAAE,MAAOgB,GACPC,QAAQD,MAAM,gCAA8BA,GAC5ChB,GAAW,EACb,GAuBIkB,EAAU,CACd,CACEC,IAAK,QACLC,MAAO,iBACPC,UAAU,GAEZ,CACEF,IAAK,OACLC,MAAO,SACPE,OAASC,IACPC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CAACC,QAAQ,UAASC,SACX,UAAVJ,EAAoB,kBAAU,cAIrC,CACEJ,IAAK,SACLC,MAAO,YAET,CACED,IAAK,SACLC,MAAO,QACPE,OAASC,IAAUK,OA1CCd,EA0CcS,GA5BlCC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CAACC,QAbQ,CACfG,UAAW,UACXC,QAAS,UACTC,OAAQ,UAUiBjB,GAAQa,SAPpB,CACbE,UAAW,kBACXC,QAAS,WACTC,OAAQ,4BAKEjB,KAfUA,QA4CtB,CACEK,IAAK,YACLC,MAAO,2BAET,CACED,IAAK,UACLC,MAAO,qBACPE,OAAQA,CAACU,EAAGC,KACVC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBR,SAAA,EAC7BH,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CAACC,KAAK,KAAKX,QAAQ,UAASC,SAAC,wBAGpCH,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CAACC,KAAK,KAAKX,QAAQ,UAASC,SAAC,oBAQ5C,OAAI5B,GAEAyB,EAAAA,EAAAA,KAAA,OAAKW,UAAU,wCAAuCR,UACpDH,EAAAA,EAAAA,KAACc,EAAAA,GAAc,CAACD,KAAK,KAAKE,KAAK,iCAMnCL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWR,SAAA,EAExBO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCR,SAAA,EAChDO,EAAAA,EAAAA,MAAA,OAAAP,SAAA,EACEH,EAAAA,EAAAA,KAAA,MAAIW,UAAU,mCAAkCR,SAAC,cACjDH,EAAAA,EAAAA,KAAA,KAAGW,UAAU,gBAAeR,SAAC,sEAE/BH,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CAACV,QAAQ,UAASC,SAAC,gCAM5BO,EAAAA,EAAAA,MAACM,EAAAA,GAAI,CAAAb,SAAA,EACHH,EAAAA,EAAAA,KAACgB,EAAAA,GAAKC,OAAM,CAAAd,UACVH,EAAAA,EAAAA,KAACgB,EAAAA,GAAKE,MAAK,CAAAf,SAAC,iBAEdH,EAAAA,EAAAA,KAACgB,EAAAA,GAAKG,KAAI,CAAAhB,UACRH,EAAAA,EAAAA,KAAA,OAAKW,UAAU,iBAAgBR,UAC7BO,EAAAA,EAAAA,MAAA,OAAAP,SAAA,EACEH,EAAAA,EAAAA,KAAA,SAAOW,UAAU,+CAA8CR,SAAC,cAGhEO,EAAAA,EAAAA,MAAA,UACEX,MAAOnB,EACPwC,SAAWC,GAAMxC,EAAkBwC,EAAEC,OAAOvB,OAC5CY,UAAU,kGAAiGR,SAAA,EAE3GH,EAAAA,EAAAA,KAAA,UAAQD,MAAM,OAAMI,SAAC,cACrBH,EAAAA,EAAAA,KAAA,UAAQD,MAAM,QAAOI,SAAC,WACtBH,EAAAA,EAAAA,KAAA,UAAQD,MAAM,UAASI,SAAC,kBACxBH,EAAAA,EAAAA,KAAA,UAAQD,MAAM,OAAMI,SAAC,8BAQ/BO,EAAAA,EAAAA,MAACM,EAAAA,GAAI,CAAAb,SAAA,EACHH,EAAAA,EAAAA,KAACgB,EAAAA,GAAKC,OAAM,CAAAd,UACVH,EAAAA,EAAAA,KAACgB,EAAAA,GAAKE,MAAK,CAAAf,SAAC,qBAEdH,EAAAA,EAAAA,KAACgB,EAAAA,GAAKG,KAAI,CAAAhB,UACRH,EAAAA,EAAAA,KAACuB,EAAAA,GAAK,CACJC,KAAM9C,EACNgB,QAASA,EACTG,UAAQ,EACR4B,WAAS,EACTC,aAAa,sC","sources":["pages/Reports/ReportsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card, Button, Badge, Table, LoadingSpinner } from '../../components/UI';\nimport { useAuth } from '../../contexts/AuthContext';\n\nconst ReportsPage = () => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [reports, setReports] = useState([]);\n  const [selectedPeriod, setSelectedPeriod] = useState('month');\n\n  useEffect(() => {\n    fetchReports();\n  }, [selectedPeriod]);\n\n  const fetchReports = async () => {\n    setLoading(true);\n    try {\n      // Simulated API call\n      setTimeout(() => {\n        setReports([\n          {\n            id: 1,\n            title: 'Aylık Satış Raporu',\n            type: 'sales',\n            period: 'Ocak 2024',\n            status: 'completed',\n            createdAt: '2024-01-31'\n          },\n          {\n            id: 2,\n            title: 'Görev Performans Raporu',\n            type: 'tasks',\n            period: 'Ocak 2024',\n            status: 'pending',\n            createdAt: '2024-01-30'\n          }\n        ]);\n        setLoading(false);\n      }, 1000);\n    } catch (error) {\n      console.error('Raporlar yüklenirken hata:', error);\n      setLoading(false);\n    }\n  };\n\n  const getStatusBadge = (status) => {\n    const variants = {\n      completed: 'success',\n      pending: 'warning',\n      failed: 'danger'\n    };\n    \n    const labels = {\n      completed: 'Tamamlandı',\n      pending: 'Bekliyor',\n      failed: 'Başarısız'\n    };\n\n    return (\n      <Badge variant={variants[status]}>\n        {labels[status]}\n      </Badge>\n    );\n  };\n\n  const columns = [\n    {\n      key: 'title',\n      label: 'Rapor Adı',\n      sortable: true\n    },\n    {\n      key: 'type',\n      label: 'Tür',\n      render: (value) => (\n        <Badge variant=\"outline\">\n          {value === 'sales' ? 'Satış' : 'Görev'}\n        </Badge>\n      )\n    },\n    {\n      key: 'period',\n      label: 'Dönem'\n    },\n    {\n      key: 'status',\n      label: 'Durum',\n      render: (value) => getStatusBadge(value)\n    },\n    {\n      key: 'createdAt',\n      label: 'Oluşturulma Tarihi'\n    },\n    {\n      key: 'actions',\n      label: 'İşlemler',\n      render: (_, row) => (\n        <div className=\"flex space-x-2\">\n          <Button size=\"sm\" variant=\"outline\">\n            Görüntüle\n          </Button>\n          <Button size=\"sm\" variant=\"primary\">\n            İndir\n          </Button>\n        </div>\n      )\n    }\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <LoadingSpinner size=\"lg\" text=\"Raporlar yükleniyor...\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Raporlar</h1>\n          <p className=\"text-gray-600\">Sistem raporlarını görüntüleyin ve indirin</p>\n        </div>\n        <Button variant=\"primary\">\n          Yeni Rapor Oluştur\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <Card.Header>\n          <Card.Title>Filtreler</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <div className=\"flex space-x-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Dönem\n              </label>\n              <select\n                value={selectedPeriod}\n                onChange={(e) => setSelectedPeriod(e.target.value)}\n                className=\"border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"week\">Bu Hafta</option>\n                <option value=\"month\">Bu Ay</option>\n                <option value=\"quarter\">Bu Çeyrek</option>\n                <option value=\"year\">Bu Yıl</option>\n              </select>\n            </div>\n          </div>\n        </Card.Body>\n      </Card>\n\n      {/* Reports Table */}\n      <Card>\n        <Card.Header>\n          <Card.Title>Rapor Listesi</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <Table\n            data={reports}\n            columns={columns}\n            sortable\n            hoverable\n            emptyMessage=\"Henüz rapor bulunmuyor\"\n          />\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default ReportsPage;"],"names":["ReportsPage","user","useAuth","loading","setLoading","useState","reports","setReports","selectedPeriod","setSelectedPeriod","useEffect","fetchReports","async","setTimeout","id","title","type","period","status","createdAt","error","console","columns","key","label","sortable","render","value","_jsx","Badge","variant","children","getStatusBadge","completed","pending","failed","_","row","_jsxs","className","Button","size","LoadingSpinner","text","Card","Header","Title","Body","onChange","e","target","Table","data","hoverable","emptyMessage"],"sourceRoot":""}